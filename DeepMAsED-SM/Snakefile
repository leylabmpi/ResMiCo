# import 
from __future__ import print_function
import os
import re
import sys
import getpass
import socket
import pandas as pd
import random

def skipped(x):
    return str(x).strip().lower().startswith('skip')

# setup
## config
configfile: 'config.yaml'
## random seed
random.seed(config['pipeline']['rnd_seed'])
## dirs 
snake_dir = config['pipeline']['snakemake_folder']
include: snake_dir + 'bin/dirs'
config['output_dir'] = config['output_dir'].rstrip('/') + '/'
## temp_dir
config['tmp_dir'] = os.path.join(config['tmp_dir'], 'deepmased-sm_' + \
                                 str(os.stat('.').st_ino) + '/')
print('\33[33mUsing temporary directory: {} \x1b[0m'.format(config['tmp_dir']))
try:
    os.makedirs(config['tmp_dir'])
except FileExistsError:
    pass

## Load
### Genomes file
config['genomes_tbl'] = pd.read_csv(config['genomes_file'], sep='\t', comment='#')
#### Taxon
for x in ['Taxon']:
    if x not in config['genomes_tbl'].columns:
        msg = 'Column "{}" not found in genomes file'
        print(msg.format(x))
        sys.exit(1)
func = lambda x: re.sub('[^A-Za-z0-9_]+', '_', x)
config['genomes_tbl']['Taxon'] = config['genomes_tbl']['Taxon'].apply(func)
#### Genome fasta
if 'Fasta' not in config['genomes_tbl'].columns:
    F = lambda x: os.path.join(genomes_dir, x + '.fna')
    config['genomes_tbl']['Fasta'] = config['genomes_tbl']['Taxon'].apply(F)
else:
    config['params']['MGSIM']['genome_download'] = 'Skip'
#### Sample metagenome
if 'Sample' in config['genomes_tbl'].columns:
    if 'Read1' not in config['genomes_tbl'].columns:
        raise IOError('"Read1" column not found in input table!')
    if 'Read2' not in config['genomes_tbl'].columns:
        sys.stderr.write('WARNING: no "Read2" column in the input table!\n')
    config['just_features'] = True
else:
    config['just_features'] = False

# Config calculated parameters
if config['just_features']:
    config['taxa_unique'] = config['genomes_tbl'].Taxon.unique().tolist()
    config['samples_unique'] = config['genomes_tbl'].Sample.unique().tolist()    
else:
    config['reps'] = [x+1 for x in range(config['params']['reps'])]
    config['assemblers'] = [k for k,v in config['params']['assemblers'].items() if not skipped(v)]

## Modular snakefiles
include: snake_dir + 'bin/Snakefile'
if config['just_features']:
    include: snake_dir + 'bin/gs_map/Snakefile'
else:
    include: snake_dir + 'bin/MGSIM/Snakefile'
    include: snake_dir + 'bin/coverage/Snakefile'
    include: snake_dir + 'bin/assembly/Snakefile'
    include: snake_dir + 'bin/true_errors/Snakefile'
    include: snake_dir + 'bin/map/Snakefile'
    include: snake_dir + 'bin/features/Snakefile'
    include: snake_dir + 'bin/SotA/Snakefile'

wildcard_constraints:
    rep='[^/]+'
wildcard_constraints:
    richness='[^/]+'
wildcard_constraints:     
    read_depth='[^/]+'
    
def all_feat_tables(genomes_tbl):
    out_files = []
    for i,x in genomes_tbl.iterrows():
        f = '{genome}/{sample}/features.tsv.gz'
	f = f.format(genome=x['Taxon'], sample=x['Sample'])
	f = map_dir + f
	out_files.append(f)
    return out_files

def all_which_input(wildcards):
    input_files = []

    if config['just_features']:
        # feature table
        input_files += all_feat_tables(config['genomes_tbl'])
        return input_files
    
    # reads
    if config['params']['keep_reads'] == True:
        x = expand(mgsim_dir + 'sim_reads/{richness}/{rep}/{read_depth}/Read1.fq.gz',
                   richness = config['params']['MGSIM']['community_richness'],
                   read_depth = config['params']['MGSIM']['read_depth'],
                   rep = config['reps'])
        input_files += x
        x = expand(mgsim_dir + 'sim_reads/{richness}/{rep}/{read_depth}/Read2.fq.gz',
                   richness = config['params']['MGSIM']['community_richness'],
                   rep = config['reps'],
                   read_depth = config['params']['MGSIM']['read_depth'])
        input_files += x
    # coverage
    if not skipped(config['params']['nonpareil']):
        x = expand(coverage_dir + '{richness}/{rep}/{read_depth}/nonpareil.npo',
                   richness = config['params']['MGSIM']['community_richness'],
                   rep = config['reps'],                
                   read_depth = config['params']['MGSIM']['read_depth'])
        input_files += x
        if not skipped(config['params']['nonpareil_summary']):
            input_files.append(coverage_dir + 'nonpareil/all_summary.RDS')
            input_files.append(coverage_dir + 'nonpareil/all_summary.txt')
            input_files.append(coverage_dir + 'nonpareil/all_curve.pdf')

    # MG assemblies
    x = expand(asmbl_dir + '{richness}/{rep}/{read_depth}/{assembler}/contigs_filtered.fasta.gz',
               richness = config['params']['MGSIM']['community_richness'],
               rep = config['reps'],                
               read_depth = config['params']['MGSIM']['read_depth'],
               assembler = config['assemblers'])
    input_files += x
    
    ## metaquast
    if not skipped(config['params']['metaquast']):
        x = expand(true_errors_dir + \
                   '{richness}/{rep}/{read_depth}/{assembler}/metaquast.done',
                   richness = config['params']['MGSIM']['community_richness'],
                   rep = config['reps'],                
                   read_depth = config['params']['MGSIM']['read_depth'],
	           assembler = config['assemblers'])
        input_files += x
        x = expand(true_errors_dir + \
                   '{richness}/{rep}/metaquast_cleanup.done',
                   richness = config['params']['MGSIM']['community_richness'],
                   rep = config['reps'])
        input_files += x

    # read mapping to contigs
    if not skipped(config['params']['samtools']):
        if not config['params']['keep_bam'] == True:
            x = expand(map_dir + '{richness}/{rep}/{read_depth}/{assembler}.bam',
                       richness = config['params']['MGSIM']['community_richness'],
                       rep = config['reps'],                
                       read_depth = config['params']['MGSIM']['read_depth'],
	               assembler = config['assemblers'])
            input_files += x

        # feature table
        if not skipped(config['params']['make_features']):    
            input_files.append(features_dir + 'feature_files.tsv')

    # State of the Art
    ## ALE
    if not skipped(config['params']['ALE']):
        x = expand(ale_dir + '{richness}/{rep}/{read_depth}/{assembler}/ALE_results.txt.gz',
                   richness = config['params']['MGSIM']['community_richness'],
                   rep = config['reps'],                
                   read_depth = config['params']['MGSIM']['read_depth'],
	           assembler = config['assemblers'])
        input_files += x
    ## VALET
    if not skipped(config['params']['VALET']):
        x = expand(valet_dir + '{richness}/{rep}/{read_depth}/{assembler}/summary.tsv',
                   richness = config['params']['MGSIM']['community_richness'],
                   rep = config['reps'],                
                   read_depth = config['params']['MGSIM']['read_depth'],
	           assembler = config['assemblers'])
        input_files += x

    return input_files


localrules: all

rule all:
    input:
        all_which_input

