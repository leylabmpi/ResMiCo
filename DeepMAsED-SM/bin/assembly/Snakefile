rule metaSPAdes:
    """
    metaSPAdes assembly 
    """
    input:
    	read1 = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/1/R1.fq',
	read2 = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/1/R2.fq'
    output:
        contigs = temp(config['tmp_dir'] + \
                       'asmbl/metaspades/{richness}/{rep}/{read_depth}/contigs.fasta')
    params:
        params = config['params']['assemblers']['metaspades'],
        tmp_dir = config['tmp_dir'] + 'asmbl/metaspades_tmp/{richness}/{rep}/{read_depth}/'
    conda:
        '../envs/assembly.yaml'
    threads:
        12     
    resources:
        time = lambda wildcards, attempt: attempt * 60 * 24,
        n = lambda wildcards, threads: threads,
        mem_gb = lambda wildcards, attempt: attempt * 44,
        mem_gb_pt = lambda wildcards, attempt: int(round(attempt * 44 / 12.0 * 1.1, 0))
    log:
        log_dir + 'metaspades/{richness}/{rep}/{read_depth}.log'
    benchmark:
        benchmark_dir + 'metaspades/{richness}/{rep}/{read_depth}.txt'
    shell:
        """
        # tmp dir
        rm -rf {params.tmp_dir} 2> {log} 1>&2
        mkdir -p {params.tmp_dir} 2>> {log} 1>&2

        # output dir
        OUTDIR=`dirname {output.contigs}`
        echo "Removing existing directory: $OUTDIR" >> {log}
        rm -rf $OUTDIR 2>> {log}

        # spades run
        spades.py --meta {params.params} \
          -t {threads} -m {resources.mem_gb} \
	  --tmp-dir {params.tmp_dir} -o $OUTDIR \
          -1 {input.read1} -2 {input.read2} \
          2>> {log} 1>&2       

        rm -rf {params.tmp_dir} 2>> {log}
        """

rule megahit:
    """
    metahit assembly 
    """
    input:
    	read1 = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/1/R1.fq',
	read2 = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/1/R2.fq'
    output:
        contigs = temp(config['tmp_dir'] + \
                       'asmbl/megahit/{richness}/{rep}/{read_depth}/contigs.fasta')
    params:
        params = config['params']['assemblers']['megahit']
    conda:
        '../envs/assembly.yaml'
    threads:
        12     
    resources:
        time = lambda wildcards, attempt: attempt * 60 * 24,
        n = lambda wildcards, threads: threads,
        mem_bytes = lambda wildcards, attempt: int(attempt * 3.2e10),
        mem_gb_pt = lambda wildcards, attempt: int(round(attempt * 32 / 8 * 1.1, 0))
    log:
        log_dir + 'megahit/{richness}/{rep}/{read_depth}.log'
    benchmark:
        benchmark_dir + 'megahit/{richness}/{rep}/{read_depth}.txt'
    shell:
        """
        OUTDIR=`dirname {output.contigs}`
        rm -rf $OUTDIR 2>> {log}

	megahit {params.params} \
          -t {threads} \
          -m {resources.mem_bytes} \
	  -o $OUTDIR \
          -1 {input.read1} \
          -2 {input.read2} \
          2>> {log} 1>&2

        mv -f $OUTDIR"/final.contigs.fa" {output.contigs} 2>> {log}
        """

rule contig_length_filter:
    """
    Filtering out short length contigs
    """
    input:
        config['tmp_dir'] + 'asmbl/{assembler}/{richness}/{rep}/{read_depth}/contigs.fasta'
    output:
        temp(config['tmp_dir'] + \
             '{richness}/{rep}/{read_depth}/{assembler}/contigs_filtered.fasta')
    params:
        exe = config['pipeline']['script_folder'] + 'contig_len_cutoff.py',
        cutoff = config['params']['contig_length_cutoff']
    conda:
        '../envs/MGSIM.yaml'
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 60 * 6,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 8
    log:
        log_dir + 'contig_length_filter/{richness}/{rep}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + 'contig_length_filter/{richness}/{rep}/{read_depth}/{assembler}.txt'
    shell:
        """
        {params.exe} --length {params.cutoff} {input} > {output} 2> {log}
        """

rule contig_compress:
    """
    Compressing contigs
    """
    input:
        config['tmp_dir'] + '{richness}/{rep}/{read_depth}/{assembler}/contigs_filtered.fasta'
    output:
        asmbl_dir + '{richness}/{rep}/{read_depth}/{assembler}/contigs_filtered.fasta.gz'
    params:
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 4
    log:
        log_dir + 'contig_compress/{richness}/{rep}/{read_depth}/{assembler}.log'
    shell:
        """
        ionice {params.ionice} gzip -c {input} > {output} 2> {log}
        """

