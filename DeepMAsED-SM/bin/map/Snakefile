rule map_bowtie2_build:
    """
    Building bowtie2 index for metagenome assembly contigs
    """
    input:
        config['tmp_dir'] + \
            '{richness}/{rep}/{read_depth}/{assembler}/contigs_filtered.fasta'
    output:
        config['tmp_dir'] + \
            '{richness}/{rep}/{read_depth}/{assembler}/map_bowtie2_build.done'
    threads:
        12
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, threads: threads,
	mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 5
    conda:
        '../envs/bowtie2.yaml'
    log:
        log_dir + \
            'map_bowtie2_build/{richness}/{rep}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + \
            'map_bowtie2_build/{richness}/{rep}/{read_depth}/{assembler}.txt'
    shell:
        """
	PREF=`echo {input} | perl -pe 's/\.[^.]+$//'`

        bowtie2-build --threads {threads} \
          {input} $PREF 2> {log} 1>&2

        touch {output} 2>> {log}
        """

rule map_bowtie2:
    """
    Mapping reads from all samples to the metagenome assembly contigs
    """
    input:
        ref = config['tmp_dir'] + \
              '{richness}/{rep}/{read_depth}/{assembler}/contigs_filtered.fasta',
	done = config['tmp_dir'] + \
               '{richness}/{rep}/{read_depth}/{assembler}/map_bowtie2_build.done',
        read1 = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/1/R1.fq',
        read2 = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/1/R2.fq'
    output:
        bam = temp(config['tmp_dir'] + \
                   '{richness}/{rep}/{read_depth}/{assembler}.bam')
    params:
        samtools = config['params']['samtools']
    conda:
        '../envs/bowtie2.yaml'
    threads:
        12
    resources:
        time = lambda wildcards, attempt: attempt * 59 * 12,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 2
    log:
        bt2 = log_dir + 'map_bowtie2/{richness}/{rep}/{read_depth}/{assembler}.log',    
        sam = log_dir + 'map_bowtie2_samtools/{richness}/{rep}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + 'map_bowtie2/{richness}/{rep}/{read_depth}/{assembler}.txt'
    shell:
        """
        rm -f {log.sam}
	PREF=`echo {input.ref} | perl -pe 's/\.[^.]+$//'`
        TMPDIR=`dirname {output.bam}`
 
        bowtie2 -p {threads} -q --no-unal \
          -x $PREF -1 {input.read1} -2 {input.read2} 2> {log.bt2} | \
          samtools view {params.samtools} -h -o - 2>> {log.sam}| \
          samtools sort -@ {threads} -T $TMPDIR -o - \
          > {output.bam} 2>> {log.sam}
        """

rule map_bam_copy:
    """
    Copying bam to permanent dir
    """
    input:
        config['tmp_dir'] + '{richness}/{rep}/{read_depth}/{assembler}.bam'
    output:
        map_dir + '{richness}/{rep}/{read_depth}/{assembler}.bam'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 2 + 4
    log:
        log_dir + 'map_bam_copy/{richness}/{rep}/{read_depth}/{assembler}.log',    
    shell:
        """
        cp -f {input} {output} 2> {log}
        """
        
rule map_bowtie2_index_bam:
    """
    Mapping reads from origin sample to the metagenome assembly contigs
    """
    input:
        bam = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/{assembler}.bam'
    output:
        bai = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/{assembler}.bam.bai'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt * 2
    conda:
        '../envs/bowtie2.yaml'
    log:
        log_dir + \
            'map_bowtie2_index_bam/{richness}/{rep}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + \
            'map_bowtie2_index_bam/{richness}/{rep}/{read_depth}/{assembler}.txt'
    shell:
        """
        samtools index -@ {threads} {input.bam} 2> {log}
        """

rule samtools_faidx:
    """
    Running samtools faidx on contigs (indexing)
    """
    input:
        config['tmp_dir'] + \
            '{richness}/{rep}/{read_depth}/{assembler}/contigs_filtered.fasta'
    output:
        temp(config['tmp_dir'] + \
             '{richness}/{rep}/{read_depth}/{assembler}/contigs_filtered.fasta.fai')
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 12
    conda:
        '../envs/bowtie2.yaml'
    log:
        log_dir + 'samtools_faidx/{richness}/{rep}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + 'samtools_faidx/{richness}/{rep}/{read_depth}/{assembler}.txt'
    shell:
        """
        samtools faidx {input} 2> {log} 1>&2
        """


