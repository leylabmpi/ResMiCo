rule combine_ref_genomes:
    """
    Combining reference genomes.
    Only using those included in the metagenome community
    """
    input:
        fna = config['genomes_file'],
        comm = mgsim_dir + '{richness}/{rep}/comm_wAbund.txt' 
    output:
        temp(config['tmp_dir'] + '{richness}/{rep}/refs/ref_genomes.fna')
    params:
        exe = config['pipeline']['script_folder'] + 'concat_ref_genomes.py',
	genomes_dir = genomes_dir
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        log_dir + 'combine_ref_genomes/{richness}/{rep}.log'
    benchmark:
        benchmark_dir + 'combine_ref_genomes/{richness}/{rep}.txt'
    shell:
        """
        OUTDIR=`dirname {output}`
        rm -rf $OUTDIR 2> {log}
        mkdir -p $OUTDIR 2>> {log}
        
        {params.exe} {input.fna} \
           {input.comm} {params.genomes_dir} \
           > {output} 2>> {log}
        """

rule minimap2_contigs_vs_refs:
    """
    minimap2 mapping of contigs to ref genomes
    """
    input:
        contigs = config['tmp_dir'] + \
                  '{richness}/{rep}/{read_depth}/{assembler}/contigs_filtered.fasta',
        refs = config['tmp_dir'] + \
               '{richness}/{rep}/refs/ref_genomes.fna'
    output:
        aln = temp(config['tmp_dir'] + \
                   'map/{richness}/{rep}/{read_depth}/{assembler}/minimap2_aln.paf')
    params:
        config['params']['minimap2']
    threads:
        12
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 * 2
    conda:
        '../envs/quast.yaml'
    log:
        log_dir + 'minimap2/{richness}/{rep}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + 'minimap2/{richness}/{rep}/{read_depth}/{assembler}.txt'
    shell:
        """
        echo "" > {log}
        minimap2 -t {threads} --secondary=no -c \
          {input.refs} {input.contigs} 2>> {log} | \
          sort -k 1 > {output.aln} 2>> {log}
        """

rule paf_compress:
    """
    compressing the PAF file
    """
    input:
        config['tmp_dir'] + \
            'map/{richness}/{rep}/{read_depth}/{assembler}/minimap2_aln.paf'
    output:
        true_errors_dir + \
            '{richness}/{rep}/{read_depth}/{assembler}/minimap2_aln.paf.gz'        
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        log_dir + 'paf_compress/{richness}/{rep}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + 'paf_compress/{richness}/{rep}/{read_depth}/{assembler}.txt'
    shell:
        """
        gzip -c {input} > {output} 2> {log}
        """

rule minimap2_contigs_vs_refs_summary:
    """
    Summarizing the PAF file generated by minimap2
    """
    input:
        aln = config['tmp_dir'] + \
              'map/{richness}/{rep}/{read_depth}/{assembler}/minimap2_aln.paf'
    output:
        true_errors_dir + \
            '{richness}/{rep}/{read_depth}/{assembler}/minimap2_aln_summary.tsv'
    params:
        exe = config['pipeline']['script_folder'] + 'paf_summarize.py'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        log_dir + \
            'minimap2_contigs_vs_refs_summary/{richness}/{rep}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + \
            'minimap2_contigs_vs_refs_summary/{richness}/{rep}/{read_depth}/{assembler}.txt'
    shell:
        """
        {params.exe} {input.aln} > {output} 2> {log}
        """

localrules: metaquast_ref_genomes
        
rule metaquast_ref_genomes:
    """
    Creating ref genome set for just those genomes with non-zero
    abundances in the simulated community.
    The genomes will be symlinked to a specific ref directory
    """
    input:
        refs = genomes_dir + 'genomes.tsv',
        abund = mgsim_dir + '{richness}/{rep}/comm_wAbund.txt'
    output:
        refs = temp(config['tmp_dir'] + 'metaquast/{richness}/{rep}/genomes/genomes.tsv')
    params:
        exe = config['pipeline']['script_folder'] + 'genome_symlink.py'
    log:
        log_dir + 'metaquast_ref_genomes/{richness}/{rep}.log'
    shell:
        """
        OUTDIR=`dirname {output.refs}`
        rm -rf $OUTDIR 2> {log}
        mkdir -p $OUTDIR 2>> {log}
        {params.exe} {input.refs} {input.abund} $OUTDIR > {output.refs} 2>> {log}
        """
        
rule metaquast:
    """
    MetaQUAST assessment of assemblies
    """
    input:
        contigs = config['tmp_dir'] + \
                  '{richness}/{rep}/{read_depth}/{assembler}/contigs_filtered.fasta',
        refs = config['tmp_dir'] + 'metaquast/{richness}/{rep}/genomes/genomes.tsv',
	read1 = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/1/R1.fq',
	read2 = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/1/R2.fq'
    output:
        info = true_errors_dir + \
	   '{richness}/{rep}/{read_depth}/{assembler}/' + \
           'combined_reference/contigs_reports/' + \
	   'contigs_report_contigs_filtered.mis_contigs.info',
        done = touch(true_errors_dir + \
                     '{richness}/{rep}/{read_depth}/{assembler}/metaquast.done')
    params:
        params = config['params']['metaquast'],
        refdir = config['tmp_dir'] + 'ref_genomes'
    threads:
        12
    resources:
        time = lambda wildcards, attempt: attempt * 60 * 36,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: int(attempt ** 2.6 + 4)
    conda:
        '../envs/quast.yaml'	
    log:
        log_dir + 'metaquast/{richness}/{rep}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + 'metaquast/{richness}/{rep}/{read_depth}/{assembler}.txt'
    shell:
        """
        # params
        OUTDIR=`dirname {output.done}`
        # removing existing metaquast output
        rm -rf $OUTDIR"/combined_reference/" 2> {log}        
        rm -rf $OUTDIR"/runs_per_reference/" 2>> {log}

        # metaquast run
        metaquast.py {params.params} -t {threads} \
          --reads1 {input.read1} --reads2 {input.read2} \
          -o $OUTDIR -r {params.refdir} \
          {input.contigs} 2>> {log} 1>&2

        touch {output.done} 2>> {log}
        """
 
rule metaquast_mis_summary_table:
    """
    Create a table of MetaQUAST-identified misassemblies for each 'bad' contig
    """
    input:
        true_errors_dir + \
            '{richness}/{rep}/{read_depth}/{assembler}/combined_reference/' + \
	    'contigs_reports/contigs_report_contigs_filtered.mis_contigs.info'
    output:
        true_errors_dir + \
            '{richness}/{rep}/{read_depth}/{assembler}/combined_reference/' + \
	    'contigs_report_contigs_filtered.mis_contigs.tsv'
    params:
        exe = config['pipeline']['script_folder'] + 'metaquast_misass_report_parse.py'
    log:
        log_dir + \
            'metaquast_mis_summary_table/{richness}/{rep}/{read_depth}/{assembler}.log'
    shell:
        """
        {params.exe} {input} > {output} 2> {log}
        """
