localrules: metaquast_env_setup            

rule metaquast_env_setup:
    """
    Adding custom code to the metaquast env 
    """
    output:
        done = touch(true_errors_dir + 'metaquast_setup.done')
    params:
        d = config['pipeline']['script_folder'] + 'gridmap'
    conda:
        '../envs/quast.yaml'	
    log:
        log_dir + 'metaquast_env_setup.log'
    shell:
        """
        LOG=`realpath {log}`
        DONE=`realpath {output.done}`
        quast.py -h > /dev/null 2> $LOG 1>&2

        cd {params.d} 2>> $LOG
        python setup.py install 2>> $LOG 1>&2
        touch $DONE 2>> $LOG
        """

rule combine_ref_genomes:
    """
    Combining reference genomes.
    Only using those included in the metagenome community
    """
    input:
        fna = config['genomes_file'],
        comm = mgsim_dir + '{richness}/{rep}/comm_wAbund.txt' 
    output:
        temp(config['tmp_dir'] + '{richness}/{rep}/refs/ref_genomes.fna')
    params:
        exe = config['pipeline']['script_folder'] + 'concat_ref_genomes.py',
	genomes_dir = genomes_dir
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        log_dir + 'combine_ref_genomes/{richness}/{rep}.log'
    benchmark:
        benchmark_dir + 'combine_ref_genomes/{richness}/{rep}.txt'
    shell:
        """
        OUTDIR=`dirname {output}`
        rm -rf $OUTDIR 2> {log}
        mkdir -p $OUTDIR 2>> {log}
        
        {params.exe} {input.fna} \
           {input.comm} {params.genomes_dir} \
           > {output} 2>> {log}
        """

localrules: metaquast_ref_genomes
        
rule metaquast_ref_genomes:
    """
    Creating ref genome set for just those genomes with non-zero
    abundances in the simulated community.
    The genomes will be symlinked to a specific ref directory
    """
    input:
        refs = genomes_dir + 'genomes.tsv',
        abund = mgsim_dir + '{richness}/{rep}/comm_wAbund.txt',
    output:
        refs = temp(config['tmp_dir'] + 'metaquast/{richness}/{rep}/genomes/genomes.tsv')
    params:
        exe = config['pipeline']['script_folder'] + 'genome_symlink.py'
    log:
        log_dir + 'metaquast_ref_genomes/{richness}/{rep}.log'
    shell:
        """
        OUTDIR=`dirname {output.refs}`
        rm -rf $OUTDIR 2> {log}
        mkdir -p $OUTDIR 2>> {log}
        {params.exe} {input.refs} {input.abund} $OUTDIR > {output.refs} 2>> {log}
        """

localrules: metaquast
        
rule metaquast:
    """
    MetaQUAST assessment of assemblies
    """
    input:
        contigs = config['tmp_dir'] + \
                  '{richness}/{rep}/{read_depth}/{assembler}/contigs_filtered.fasta',
        refs = config['tmp_dir'] + 'metaquast/{richness}/{rep}/genomes/genomes.tsv',
	read1 = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/1/R1.fq',
	read2 = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/1/R2.fq',
        done = true_errors_dir + 'metaquast_setup.done'
    output:
        info_tmp = temp(config['tmp_dir'] + \
	                '{richness}/{rep}/{read_depth}/{assembler}/' + \
                        'combined_reference/contigs_reports/' + \
	                'contigs_report_contigs_filtered.mis_contigs.info'),
        fasta_tmp = temp(config['tmp_dir'] + \
                         '{richness}/{rep}/{read_depth}/{assembler}/combined_reference/' + \
	                 'contigs_reports/contigs_filtered.mis_contigs.fa'),
        done_tmp = touch(config['tmp_dir'] + \
                         '{richness}/{rep}/{read_depth}/{assembler}/metaquast.done'),
        info = true_errors_dir + \
	   '{richness}/{rep}/{read_depth}/{assembler}/' + \
           'combined_reference/contigs_reports/' + \
	   'contigs_report_contigs_filtered.mis_contigs.info',
        fasta = true_errors_dir + \
            '{richness}/{rep}/{read_depth}/{assembler}/combined_reference/' + \
	    'contigs_reports/contigs_filtered.mis_contigs.fa',
        done = touch(true_errors_dir + \
                     '{richness}/{rep}/{read_depth}/{assembler}/metaquast.done')
    params:
        params = config['params']['metaquast'],
        exe = config['pipeline']['script_folder'] + 'metaquast_gridmap.py',
        ionice = config['params']['ionice']
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 60 * 24 + 8640,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: int(attempt ** 2.3 + 6)
    conda:
        '../envs/quast.yaml'	
    log:
        log_dir + 'metaquast/{richness}/{rep}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + 'metaquast/{richness}/{rep}/{read_depth}/{assembler}.txt'
    shell:
        """
        # params
        REFDIR=`dirname {input.refs}`
        TMPOUTDIR=`dirname {output.done_tmp}`
        OUTDIR=`dirname {output.done}`
        # removing existing metaquast output
        rm -rf $TMPOUTDIR"/combined_reference/" 2> {log}        
        rm -rf $TMPOUTDIR"/runs_per_reference/" 2>> {log}
        rm -rf $OUTDIR"/combined_reference/" 2> {log}        
        rm -rf $OUTDIR"/runs_per_reference/" 2>> {log}

        # metaquast run
        {params.exe} -t {threads} {params.params}  \
          --max-ref-number 0 --no-gzip \
          --reads1 {input.read1} --reads2 {input.read2} \
          -o $TMPOUTDIR -r $REFDIR \
          {input.contigs} 2>> {log} 1>&2

        # copying
        mkdir -p $OUTDIR 2>> {log}
        ionice {params.ionice} cp -rf $TMPOUTDIR/* $OUTDIR 2>> {log} 
        touch {output.done_tmp} {output.done} 2>> {log}
        """
 
localrules: metaquast_ref_genomes_rm
        
rule metaquast_ref_genomes_rm:
    """
    Removing ref genomes directory
    """
    input:
        refs = config['tmp_dir'] + 'metaquast/{richness}/{rep}/genomes/genomes.tsv',
        done = expand(true_errors_dir + \
                      '{{richness}}/{{rep}}/{read_depth}/{assembler}/metaquast.done',
                      read_depth = config['params']['MGSIM']['read_depth'],
	              assembler = config['assemblers'])
    output:
        done = true_errors_dir + '{richness}/{rep}/metaquast_cleanup.done'
    log:
        log_dir + 'metaquast_ref_genomes_rm/{richness}/{rep}.log'
    shell:
        """
        > {log}
        find `dirname {input}` -name "*.fna" 2>> {log} | xargs rm -f 2>> {log}
        touch {output.done}
        """
