rule ALE:
    """
    Running ALE on assemblies
    """
    input:
        ref = config['tmp_dir'] + \
              '{richness}/{rep}/{read_depth}/{assembler}/contigs_filtered.fasta',
        bam = config['tmp_dir'] + \
              '{richness}/{rep}/{read_depth}/{assembler}.bam',
        bai = config['tmp_dir'] + \
              '{richness}/{rep}/{read_depth}/{assembler}.bam.bai'
    output:
        txt = temp(config['tmp_dir'] + \
               '{richness}/{rep}/{read_depth}/{assembler}/ALE_results.txt'),
        gz = ale_dir + \
              '{richness}/{rep}/{read_depth}/{assembler}/ALE_results.txt.gz'
    params:
        params = config['params']['ALE'],
        exe = config['pipeline']['script_folder'] + 'ALE',
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt * 59 * 12,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 7
    log:
        log_dir + 'ALE/{richness}/{rep}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + 'ALE/{richness}/{rep}/{read_depth}/{assembler}.txt'
    shell:
        """
        {params.exe} {params.params} \
           {input.bam} {input.ref} {output.txt} \
           2> {log} 1>&2
        ionice {params.ionice} gzip -c {output.txt} > {output.gz} 2> {log}
        """

rule VALET:
    """
    Running VALET on assemblies
    """
    input:
        ref = config['tmp_dir'] + \
              '{richness}/{rep}/{read_depth}/{assembler}/contigs_filtered.fasta',
    	read1 = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/1/R1.fq',
	read2 = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/1/R2.fq'
    output:
        sum = valet_dir + '{richness}/{rep}/{read_depth}/{assembler}/summary.tsv',
        sbed = valet_dir + '{richness}/{rep}/{read_depth}/{assembler}/summary.bed',
        ssbed = valet_dir + '{richness}/{rep}/{read_depth}/{assembler}/suspicious.bed',
        cbed = valet_dir + '{richness}/{rep}/{read_depth}/{assembler}/coverage.bed',
        bbed = valet_dir + '{richness}/{rep}/{read_depth}/{assembler}/breakpoints.bed'
    params:
        params = config['params']['VALET'],
        ionice = config['params']['ionice'],
        tmp_dir = config['tmp_dir'] + \
                  'VALET/{richness}/{rep}/{read_depth}/{assembler}/valet_out/reference/'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt * 60 * 12,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 2
    conda:
        '../envs/valet.yaml'
    log:
        log_dir + 'VALET/{richness}/{rep}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + 'VALET/{richness}/{rep}/{read_depth}/{assembler}.txt'
    shell:
        """
        # tmp directory
        TMPDIR=`dirname {params.tmp_dir}`
        rm -rf $TMPDIR 2> {log}

        # valet run
        valet.py --threads {threads} \
          --assembly-names reference \
          --skip-reapr {params.params} \
          --output-dir $TMPDIR -a {input.ref} \
          -1 {input.read1} -2 {input.read2} \
          2>> {log}        

        # copying files
        ionice {params.ionice} cp -f {params.tmp_dir}/summary.tsv {output.sum} 2>> {log}
        ionice {params.ionice} cp -f {params.tmp_dir}/summary.bed {output.sbed} 2>> {log}
        ionice {params.ionice} cp -f {params.tmp_dir}/suspicious.bed {output.ssbed} 2>> {log}
        ionice {params.ionice} cp -f {params.tmp_dir}/coverage.bed {output.cbed} 2>> {log}
        ionice {params.ionice} cp -f {params.tmp_dir}/breakpoints.bed {output.bbed} 2>> {log}
        
        # removing tmp dir
        rm -rf $TMPDIR 2>> {log}
        """
