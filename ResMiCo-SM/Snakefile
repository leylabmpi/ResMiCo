# import 
from __future__ import print_function
import os
import re
import sys
import glob
import getpass
import socket
import pandas as pd
import random
import itertools

def skipped(x):
    return str(x).strip().lower().startswith('skip')
def is_true(x):
    if x is None:
        return False
    else:
        return str(x).strip().lower() == 'true'
def J(*args):
    return os.path.join(*args)

# setup
random.seed(21212)
## config
if len(config.keys()) == 0:
    configfile: 'config.yaml'
config['pipeline']['email'] = config['email']
## dirs 
snake_dir = config['pipeline']['snakemake_folder']
include: snake_dir + 'bin/dirs'
config['output_dir'] = config['output_dir'].rstrip('/') + '/'
## temp_dir
config['tmp_dir'] = os.path.join(config['tmp_dir'], 'resmico-sm_' + \
                                 str(os.stat('.').st_ino) + '/')
print('\33[33mUsing temporary directory: {} \x1b[0m'.format(config['tmp_dir']))
try:
    os.makedirs(config['tmp_dir'])
except FileExistsError:
    pass

## Load
### Genomes file
config['genomes_tbl'] = pd.read_csv(config['genomes_file'], sep='\t', comment='#')
#### Taxon
for x in ['Taxon']:
    if x not in config['genomes_tbl'].columns:
        msg = 'Column "{}" not found in genomes file'
        raise ValueError(msg.format(x))
func = lambda x: re.sub('[^A-Za-z0-9_]+', '_', x)
config['genomes_tbl']['Taxon'] = config['genomes_tbl']['Taxon'].apply(func)
#### Genome fasta
if 'Fasta' not in config['genomes_tbl'].columns:
    F = lambda x: os.path.join(genomes_dir, x + '.fna')
    config['genomes_tbl']['Fasta'] = config['genomes_tbl']['Taxon'].apply(F)
else:
    config['params']['MGSIM']['genome_download'] = 'Skip'
#### Sample metagenome
if 'Sample' in config['genomes_tbl'].columns:
    if 'Read1' not in config['genomes_tbl'].columns:
        raise IOError('"Read1" column not found in input table!')
    if 'Read2' not in config['genomes_tbl'].columns:
        sys.stderr.write('WARNING: no "Read2" column in the input table!\n')
    config['just_features'] = True
else:
    config['just_features'] = False
### Reads file (using genomes + pre-simulated reads)
if not skipped(config['reads_file']):
    config['reads_tbl'] = pd.read_csv(config['reads_file'], sep='\t', comment='#')
    for col in ['Sample', 'Read1', 'Read2']:
        if col not in config['reads_tbl'].columns:
            raise IOError('"{}" column not found in reads table!'.format(col))
else:
    config['reads_tbl'] = None
    
# Config calculated parameters
## if user provided
config['sim_params'] = {'richness' : [], 'abund_dist' : [],
                        'read_depth' : [], 'read_length' : [],
                        'rep' : [], 'assembler' : []}
df_dtypes = {'richness' : str, 'abund_dist' : [],
             'read_depth' : int, 'read_length' : [],
             'rep' : int, 'assembler' : str}
if config['just_features']:
    config['taxa_unique'] = config['genomes_tbl'].Taxon.unique().tolist()
    config['samples_unique'] = config['genomes_tbl'].Sample.unique().tolist()
else:
    if config['reads_tbl'] is None:
        richness = config['params']['MGSIM']['community']['richness']
        abund_dist = [re.sub(r'[:,]+', '-', x) for x in config['params']['MGSIM']['community']['abundance_distribution']]
        read_length = config['params']['MGSIM']['reads']['length']    
        read_depth = config['params']['MGSIM']['reads']['depth']
        reps = [x+1 for x in range(config['params']['MGSIM']['sim_reps'])]
        assemblers = [k for k,v in config['params']['assemblers'].items() if not skipped(v)]
    else:
        richness = config['reads_tbl'].Sample.tolist()
        abund_dist = ['NA']
        read_length = ['NA']
        read_depth = ['NA']
        reps = ['NA']
        assemblers = [k for k,v in config['params']['assemblers'].items() if not skipped(v)]
    for x in itertools.product(richness, abund_dist, read_length, read_depth, reps, assemblers):
        config['sim_params']['richness'].append(x[0])
        config['sim_params']['abund_dist'].append(x[1])
        config['sim_params']['read_length'].append(x[2])
        config['sim_params']['read_depth'].append(x[3])
        config['sim_params']['rep'].append(x[4])
        config['sim_params']['assembler'].append(x[5])
## data.frame of all varying simulation parameters
config['sim_params'] = pd.DataFrame.from_dict(config['sim_params'])


def Expand(file_template, param_df, debug=False):
    """
    Using colnames as kwargs for file_template.format() 
    """
    func = lambda x: file_template.format(**x)
    files = param_df.apply(func, axis=1).tolist()
    if debug is True:
        print('\n'.join(files))
        print('----------')
    return(files)

## Modular snakefiles
include: snake_dir + 'bin/Snakefile'
include: snake_dir + 'bin/ll_pipeline_utils/Snakefile'
if config['just_features']:
    include: snake_dir + 'bin/gs_map/Snakefile'
else:
    if config['reads_tbl'] is None:
        include: snake_dir + 'bin/MGSIM/Snakefile'
    else:
        include: snake_dir + 'bin/reads/Snakefile'
    include: snake_dir + 'bin/coverage/Snakefile'
    include: snake_dir + 'bin/assembly/Snakefile'
    include: snake_dir + 'bin/true_errors/Snakefile'
    include: snake_dir + 'bin/map/Snakefile'
    include: snake_dir + 'bin/features/Snakefile'
    include: snake_dir + 'bin/SotA/Snakefile'

wildcard_constraints:
    rep='[^/]+',
    richness='[^/]+',
    read_depth='[^/]+',
    assembler='[^/]+'
    
localrules: all
rule all:
    input:
        all_which_input

