#pragma once

#include "util/logger.hpp"

#include <string>
#include <unordered_map>

/**
 * Object containing metaQUAST mis-assembly information, as extracted from the
 * contigs_reports/contigs_report_<contig_name>.mis_contigs.info report files generated by
 * metaQUAST. A typical report fragment used to generate this object looks like:
 * ```
 * scaffold_287
 * Extensive misassembly ( relocation, inconsistency = -1933 ) between 568 808 and 787 1924
 * Extensive misassembly ( relocation, inconsistency = 2420 ) between 8918 14542 and 18586 20876
 * scaffold_300
 * Extensive misassembly ( translocation ) between 1 24807 and 24697 34392
 * ```
 */
struct MisassemblyInfo {
    uint32_t start;
    uint32_t end;
    uint32_t break_start;
    uint32_t break_end;

    enum Type { RELOCATION, TRANSLOCATION, INTERSPECIES_TRANSLOCATION, INVERSION };
    Type type;

    void set_type(const std::string &str_tp) {
        if (str_tp == "relocation") {
            type = RELOCATION;
        } else if (str_tp == "translocation") {
            type = TRANSLOCATION;
        } else if (str_tp == "interspecies translocation") {
            type = INTERSPECIES_TRANSLOCATION;
        } else if (str_tp == "inversion") {
            type = INVERSION;
        } else {
            logger()->error("Unknown type: {}", str_tp);
            std::exit(1);
        }
    }

    uint8_t type_to_int(Type t) { return 1 << t; }
};

std::string type_to_string(uint8_t t);

/**
 * Returns one or two #MisassemblyInfo objects corresponding to the parsed line.
 * In most cases, only one #MisassemblyInfo is returned, but in the case where the two intervals
 * don't overlap (e.g. a translocation between 100 5 and 4000 1000) one #MisassemblyInfo for each
 * interval will be returned.
 * @param line the metaQuast line to be parsed, e.g. "Extensive misassembly ( relocation,
 * inconsistency = 9143 ) between 607 6 and 4714 1516")
 * @return the #MisassemblyInfo objects corresponding to the parsed line
 */
std::vector<MisassemblyInfo> parse_line(const std::string &line);

/**
 * Parsing metaQUAST's mis_contigs.info file, which contains information about contig misassemblies.
 * See #MisassemblyInfo for an example of what this file looks like. More info at:
 * http://quast.sourceforge.net/docs/manual.html
 *
 * @return a map from contig_ids to the list of misassembly informations (if any) corresponding to
 * that contig.
 * @note MetaQUAST position info is 1-indexed
 */
std::unordered_map<std::string, std::vector<MisassemblyInfo>>
parse_misassembly_info(const std::string &report_file);

/**
 * Expands the misassembly intervals for each position in the contig.
 * @param contig_length the length of the contig
 * @param mis a possibly empty list of misassembled intervals
 * @return a vector of length contig_length, where each position is either 0 (no misassembly) or
 * one of #MissasemplyInfo::Type values.
 */
std::vector<uint8_t> expand(uint32_t contig_length, const std::vector<MisassemblyInfo> &mis);
