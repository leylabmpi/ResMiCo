def bam2feat_input(wildcards):
    d = map_bowtie2_input(wildcards)
    # adding subsampled bam files
    d['bam'] = J(config['tmp_dir'], 'map', P() + '.bam')
    d['bai'] = J(config['tmp_dir'], 'map', P() + '.bam.bai')
    # if ground-truth
    if config['input_type'] != 'real data':
        d['fasta'] = J(true_errors_dir, P(), 'combined_reference', 'contigs_reports',
                       'contigs_filtered_sub.mis_contigs.fa'),
        d['masmbl'] = J(true_errors_dir, P(), 'combined_reference', 'contigs_reports',
                        'contigs_report_contigs_filtered_sub.mis_contigs.info')
    return d

def bam2feat_masmbl(wildcards):
    if config['input_type'] == 'real data':
        return ''
    else:
        F = J(true_errors_dir, P(), 'combined_reference', 'contigs_reports',
              'contigs_report_contigs_filtered_sub.mis_contigs.info')
        F= F.format(richness = wildcards.richness,
                    abund_dist = wildcards.abund_dist,
                    rep = wildcards.rep,
                    read_length = wildcards.read_length,
                    read_depth = wildcards.read_depth,
                    assembler = wildcards.assembler,
                    contig_frac = wildcards.contig_frac)
        return '--misassembly_file ' + F

rule bam2feat:
    """
    Converting bam to features
    """
    input:
        unpack(bam2feat_input)
    output:
        toc = temp(J(config['tmp_dir'], 'feats', P(), 'toc')),
        tocc = temp(J(config['tmp_dir'], 'feats', P(), 'toc_chunked')),         
        sts = temp(J(config['tmp_dir'], 'feats', P(), 'stats')),
        tsv = temp(J(config['tmp_dir'], 'feats', P(), 'features.tsv.gz')),
        fb = temp(J(config['tmp_dir'], 'feats', P(), 'features_binary')),
        fbc = temp(J(config['tmp_dir'], 'feats', P(), 'features_binary_chunked'))
    params:
        exe = config['pipeline']['script_folder'] + 'bam2feat', 
	params = config['params']['feature_table']['make'],
        assembler = lambda wildcards: wildcards.assembler,
        exe_empty = config['pipeline']['script_folder'] + 'is_empty.py',
        masmbl = bam2feat_masmbl
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, attempt, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 3 + 2
    conda:
        '../envs/bowtie2.yaml'
    log:
        J(log_dir, 'bam_to_DL_features', P() + '.log')
    benchmark:
        J(bmk_dir, 'bam_to_DL_features', P() + '.txt')
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        OUTDIR=`dirname {output.tsv}`
        if [ `{params.exe_empty} {input.fna}` -eq 0 ]; then
          {params.exe} {params.params} {params.masmbl} \
            --procs {threads} --o $OUTDIR \
            --assembler {params.assembler} \
            --bam_file {input.bam} \
            --fasta_file {input.fna} \
            2>> {log} 1>&2
        else
          echo "Input empty; skipping" > {log}
          touch {output.tsv} 2>> {log}
        fi
        """
        
rule features_copy:
    """
    Copyin over feature table info
    """
    input:
        toc = J(config['tmp_dir'], 'feats', P(), 'toc'),
        tocc = J(config['tmp_dir'], 'feats', P(), 'toc_chunked'),   
        sts = J(config['tmp_dir'], 'feats', P(), 'stats'),
        tsv = J(config['tmp_dir'], 'feats', P(), 'features.tsv.gz'),
        fb = J(config['tmp_dir'], 'feats', P(), 'features_binary'),
        fbc = J(config['tmp_dir'], 'feats', P(), 'features_binary_chunked')
    output:
        toc = J(features_dir, P(), 'toc'),
        tocc = J(features_dir, P(), 'toc_chunked'),
        sts = J(features_dir, P(), 'stats'),
        tsv = J(features_dir, P(), 'features.tsv.gz'),
        fb = J(features_dir, P(), 'features_binary'),
        fbc = J(features_dir, P(), 'features_binary_chunked')
    params:
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 * 8
    log:
        J(log_dir, 'features_copy', P() + '.log')
    benchmark:
        J(bmk_dir, 'features_copy', P() + '.txt')
    shell:
        """
        ionice {params.ionice} cp -f {input.toc} {output.toc} 2> {log}
        ionice {params.ionice} cp -f {input.tocc} {output.tocc} 2>> {log}
        ionice {params.ionice} cp -f {input.sts} {output.sts} 2>> {log}
        ionice {params.ionice} cp -f {input.tsv} {output.tsv} 2>> {log}
        ionice {params.ionice} cp -r {input.fb} {output.fb} 2>> {log}
        ionice {params.ionice} cp -r {input.fbc} {output.fbc} 2>> {log}
        """

localrules: features_file_table        
rule features_file_table:
    """
    Creating a table that lists all feature files
    """
    input:
        feats = Expand(J(features_dir, P(), 'features.tsv.gz'),
                       config['sim_params'])
    output:
        tsv = features_dir + 'feature_files.tsv'
    params:
        reads = config['params']['MGSIM']['reads']['other_sim_params']
    log:
        log_dir + 'features_file_table.log'
    benchmark:
        benchmark_dir + 'featuress_file_table.txt'
    run:
        import os,sys
        MGSIM_reads = '"' + params.reads + '"'
        cols = ['richness', 'abundance_distribution', 'rep',
                'read_length', 'read_depth', 'assembler', 'contig_frac',
                'feature_file', 'MGSIM_reads_params']
        with open(output.tsv, 'w') as outF:
            outF.write('\t'.join(cols) + '\n')
            for F in input.feats:
                D,feat_file = os.path.split(F)
                D,contig_frac = os.path.split(D)
                D,assembler = os.path.split(D)
                D,read_depth = os.path.split(D)
                D,read_length = os.path.split(D)
                D,rep = os.path.split(D)
                D,abund_dist = os.path.split(D)
                D,richness = os.path.split(D)
                rel_path = os.path.join(richness, abund_dist, rep, read_length, read_depth,
                                        assembler, contig_frac, os.path.split(F)[1])
                x = '\t'.join([richness, abund_dist, rep, read_length, read_depth, assembler,
                               contig_frac, rel_path, MGSIM_reads])
                outF.write(x + '\n')
