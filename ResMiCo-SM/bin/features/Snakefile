rule bam_to_DL_features:
    """
    Converting bam to features
    """
    input:
        fasta = config['tmp_dir'] + \
                '{richness}/{rep}/{read_depth}/{assembler}/contigs_filtered.fasta',
	fai = config['tmp_dir'] + \
              '{richness}/{rep}/{read_depth}/{assembler}/contigs_filtered.fasta.fai',
        bam = config['tmp_dir'] + \
              '{richness}/{rep}/{read_depth}/{assembler}.bam',
        bai = config['tmp_dir'] + \
              '{richness}/{rep}/{read_depth}/{assembler}.bam.bai'
    output:
        tsv = temp(config['tmp_dir'] + 'feats/{richness}/{rep}/{read_depth}/{assembler}/features.tsv')
    params:
        exe = config['pipeline']['script_folder'] + 'bam2feat',  #bam2feat.py',
	params = config['params']['make_features'],
        assembler = lambda wildcards: wildcards.assembler
    threads:
        4
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 60 * 12,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 3 * 6
    conda:
        '../envs/bowtie2.yaml'
    log:
        log_dir + 'bam_to_DL_features/{richness}/{rep}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + 'bam_to_DL_features/{richness}/{rep}/{read_depth}/{assembler}.txt'
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        {params.exe} {params.params} --procs {threads} \
          --batches 100 --chunks 100 \
          --assembler {params.assembler} \
          --bam_file {input.bam} \
          --fasta_file {input.fasta} \
          --o {output.tsv} \
          2> {log} 1>&2
        """

# rule bam_to_DL_features:
#     """
#     Converting bam to features
#     """
#     input:
#         fasta = config['tmp_dir'] + \
#                 '{richness}/{rep}/{read_depth}/{assembler}/contigs_filtered.fasta',
# 	fai = config['tmp_dir'] + \
#               '{richness}/{rep}/{read_depth}/{assembler}/contigs_filtered.fasta.fai',
#         bam = config['tmp_dir'] + \
#               '{richness}/{rep}/{read_depth}/{assembler}.bam',
#         bai = config['tmp_dir'] + \
#               '{richness}/{rep}/{read_depth}/{assembler}.bam.bai'
#     output:
#         tsv = temp(config['tmp_dir'] + 'feats/{richness}/{rep}/{read_depth}/{assembler}/features.tsv')
#     params:
#         exe = config['pipeline']['script_folder'] + 'bam2feat.py',
# 	params = config['params']['make_features'],
#         assembler = lambda wildcards: wildcards.assembler
#     threads:
#         12
#     resources:
#         time = lambda wildcards, attempt: attempt ** 2 * 60 * 12,
#         n = lambda wildcards, threads: threads,         
#         mem_gb_pt = lambda wildcards, attempt: int(round(attempt ** 2.1 * 2 + 3, 0)),
#         batches = lambda wildcards, attempt: attempt * 2 * 400
#     conda:
#         '../envs/bowtie2.yaml'
#     log:
#         log_dir + 'bam_to_DL_features/{richness}/{rep}/{read_depth}/{assembler}.log'
#     benchmark:
#         benchmark_dir + 'bam_to_DL_features/{richness}/{rep}/{read_depth}/{assembler}.txt'
#     shell:
#         """        
#         export PATH=$CONDA_PREFIX/bin:$PATH
#         {params.exe} {params.params} \
#           -p {threads} --chunks 200 \
#           --batches {resources.batches} \
#           --assembler {params.assembler} \
#           {input.bam} {input.fasta} \
#           > {output.tsv} 2> {log}
#         """
        
rule metaquast_masmbl_feature_join:
    """
    Adding metaQUAST misassembly report info to feature table
    """
    input:
        fasta = true_errors_dir + \
            '{richness}/{rep}/{read_depth}/{assembler}/combined_reference/' + \
	    'contigs_reports/contigs_filtered.mis_contigs.fa',
        masmbl = true_errors_dir + \
            '{richness}/{rep}/{read_depth}/{assembler}/combined_reference/' + \
	    'contigs_reports/contigs_report_contigs_filtered.mis_contigs.info',
        feats = config['tmp_dir'] + 'feats/{richness}/{rep}/{read_depth}/{assembler}/features.tsv'
    output:
        temp(config['tmp_dir'] + \
            'feats/{richness}/{rep}/{read_depth}/{assembler}/features_j.tsv')
    params:
        exe = config['pipeline']['script_folder'] + 'metaquast_masmbl_report_feature_join.py'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 60 * 8,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 * 2 + 10
    conda:
        '../envs/bowtie2.yaml'
    log:
        log_dir + \
            'metaquast_masmbl_feature_join/{richness}/{rep}/{read_depth}/{assembler}.log'
    benchmark:
        log_dir + \
            'metaquast_masmbl_feature_join/{richness}/{rep}/{read_depth}/{assembler}.txt'
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        {params.exe} {input.fasta} {input.masmbl} {input.feats} > {output} 2> {log}
        """

rule features_compress:
    """
    Compressing table
    """
    input:
        config['tmp_dir'] + \
            'feats/{richness}/{rep}/{read_depth}/{assembler}/features_j.tsv'
    output:
        features_dir + '{richness}/{rep}/{read_depth}/{assembler}/features.tsv.gz'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 * 8
    log:
        log_dir + 'features_compress/{richness}/{rep}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + 'features_compress/{richness}/{rep}/{read_depth}/{assembler}.txt'
    shell:
        """
        gzip -c {input} > {output} 2> {log}
        """

localrules: features_file_table        
rule features_file_table:
    """
    Creating a table that lists all feature files
    """
    input:
        feats = Expand(features_dir + \
                       '{richness}/{rep}/{read_depth}/{assembler}/features.tsv.gz',
                       config['sim_params'])
    output:
        tsv = features_dir + 'feature_files.tsv'
    params:
        reads = config['params']['MGSIM']['reads']
    log:
        log_dir + 'features_file_table.log'
    benchmark:
        benchmark_dir + 'featuress_file_table.txt'
    run:
        import os,sys
        MGSIM_reads = '"' + params.reads + '"'
        cols = ['richness', 'rep', 'read_depth', 'assembler',
                'feature_file', 'MGSIM_reads_params']
        with open(output.tsv, 'w') as outF:
            outF.write('\t'.join(cols) + '\n')
            for F in input.feats:
                D,feat_file = os.path.split(F)
                D,assembler = os.path.split(D)
                D,read_depth = os.path.split(D)
                D,rep = os.path.split(D)
                D,richness = os.path.split(D)
                rel_path = os.path.join(richness, rep, read_depth, assembler,
                                        os.path.split(F)[1])
                x = '\t'.join([richness, rep, read_depth, assembler, rel_path, MGSIM_reads])
                outF.write(x + '\n')
