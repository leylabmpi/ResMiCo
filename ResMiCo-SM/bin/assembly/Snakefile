def denovo_asmbl_memory(wildcards, attempt, threads, input, unit='per_thread_gb'):
    """
    Estimating memory required for de novo assemblies
    """
    # total estimated memory size based on reads (Gb)
    total_size = sum([os.path.getsize(f) for f in input if os.path.isfile(f)])
    total_size = total_size / float(1e9) * 5
    total_size = 64.0 if total_size < 64.0 else total_size
    mem = attempt ** 2 * total_size
    mem = 900 if mem > 900 else mem
    # specific unit
    if unit == 'per_thread_gb':
        mem = mem / float(threads)
    elif unit == 'total_gb':
        mem = mem * 1.0
    elif unit == 'bytes':
        mem = mem * 1e9
    else:
        raise ValueError('Cannot use unit: {}'.format(unit))
    mem = int(round(mem, 0))
    return mem

rule asmbl_metaSPAdes:
    """
    metaSPAdes assembly 
    """
    input:
    	read1 = config['tmp_dir'] + '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/sim_reads/R1.fq',
	read2 = config['tmp_dir'] + '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/sim_reads/R2.fq'
    output:
        contigs = temp(config['tmp_dir'] + \
                       'asmbl/metaspades/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/contigs.fasta')
    params:
        params = config['params']['assemblers']['metaspades'],
        tmp_dir = config['tmp_dir'] + 'asmbl/metaspades_tmp/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/'
    conda:
        '../envs/assembly.yaml'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt * 60 * 24,
        n = lambda wildcards, threads: threads,
        mem_gb = lambda wildcards, attempt, threads, input: \
                 denovo_asmbl_memory(wildcards, attempt, threads, input, \
                                     unit='total_gb'),
        mem_gb_pt = lambda wildcards, attempt, threads, input: \
                    denovo_asmbl_memory(wildcards, attempt, threads, input, \
                                        unit='per_thread_gb'),
        attempt = lambda wildcards, attempt, threads, input: attempt
    log:
        log_dir + 'asmbl/metaspades/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}.log'
    benchmark:
        benchmark_dir + 'asmbl/metaspades/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}.txt'
    shell:
        """
        OUTDIR=`dirname {output.contigs}`
        if [ "{resources.attempt}" == "1" ]; then
          echo "Attempt 1; starting from the beginning" > {log}
          rm -rf {params.tmp_dir} $OUTDIR 2>> {log} 1>&2
          mkdir -p {params.tmp_dir} 2>> {log} 1>&2
          spades.py --meta {params.params} \
            -t {threads} -m {resources.mem_gb} \
            --tmp-dir {params.tmp_dir} -o $OUTDIR \
            -1 {input.read1} -2 {input.read2} \
            2>> {log} 1>&2       
        else
          echo "Attempt > 1; continuing from last checkpoint" > {log}
          spades.py -m {resources.mem_gb} -o $OUTDIR \
            --restart-from last 2>> {log} 1>&2
        fi
        rm -rf {params.tmp_dir} 2>> {log}
        """

rule asmbl_megahit:
    """
    metahit assembly 
    """
    input:
    	read1 = config['tmp_dir'] + '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/sim_reads/R1.fq',
	read2 = config['tmp_dir'] + '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/sim_reads/R2.fq'
    output:
        contigs = temp(config['tmp_dir'] + \
                       'asmbl/megahit/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/contigs.fasta')
    params:
        params = config['params']['assemblers']['megahit']
    conda:
        '../envs/assembly.yaml'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt * 60 * 24,
        n = lambda wildcards, threads: threads,
        mem_bytes = lambda wildcards, attempt, threads, input: \
                    denovo_asmbl_memory(wildcards, attempt, threads, input, \
                                        unit='bytes'),
        mem_gb_pt = lambda wildcards, attempt, threads, input: \
                    denovo_asmbl_memory(wildcards, attempt, threads, input, \
                                        unit='per_thread_gb')
    log:
        log_dir + 'asmbl/megahit/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}.log'
    benchmark:
        benchmark_dir + 'asmbl/megahit/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}.txt'
    shell:
        """
        OUTDIR=`dirname {output.contigs}`
        rm -rf $OUTDIR 2>> {log}

	megahit {params.params} \
          -t {threads} \
          -m {resources.mem_bytes} \
	  -o $OUTDIR \
          -1 {input.read1} \
          -2 {input.read2} \
          2>> {log} 1>&2

        mv -f $OUTDIR"/final.contigs.fa" {output.contigs} 2>> {log}
        """

rule asmbl_contig_length_filter:
    """
    Filtering out short length contigs
    """
    input:
        config['tmp_dir'] + 'asmbl/{assembler}/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/contigs.fasta'
    output:
        temp(config['tmp_dir'] + \
             '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}/contigs_filtered.fasta')
    params:
        exe = config['pipeline']['script_folder'] + 'contig_len_cutoff.py',
        cutoff = config['params']['contigs']['length_cutoff']
    conda:
        '../envs/MGSIM.yaml'
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 60 * 6,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 8
    log:
        log_dir + 'asmbl/contig_length_filter/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + 'asmbl/contig_length_filter/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.txt'
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        {params.exe} --length {params.cutoff} {input} > {output} 2> {log}
        """

rule asmbl_contig_compress:
    """
    Compressing contigs
    """
    input:
        config['tmp_dir'] + '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}/contigs_filtered.fasta'
    output:
        asmbl_dir + '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}/contigs_filtered.fasta.gz'
    params:
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 5
    log:
        log_dir + 'asmbl/contig_compress/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.log'
    shell:
        """
        ionice {params.ionice} gzip -c {input} > {output} 2> {log}
        """

