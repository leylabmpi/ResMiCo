localrules: nonpareil_precheck
rule nonpareil_precheck:
    """
    nonpareil conda env check
    """
    output:
        touch(coverage_dir + 'precheck_nonpareil.done')
    params:
        exe = J(config['pipeline']['script_folder'], 'r_javareconf_patch.py')
    conda:
        '../envs/nonpareil.yaml'
    log:
        J(log_dir, 'nonpareil_precheck.log')
    shell:
        """
        P=`command -v R 2> {log}`
        if [ P == "" ]; then
           echo "ERROR: R command not found" >> {log}
           exit 1
        fi
        P=`dirname $P`
        P=`dirname $P`

        {params.exe} $P 2>> {log} 1>&2
        """

rule nonpareil:
    """
    Running nonpariel to determine sample coverage
    """
    input:
        check = J(coverage_dir, 'precheck_nonpareil.done'),
        read1 = J(config['tmp_dir'], P(5), 'sim_reads/R1.fq')
    output:
        npo = J(coverage_dir, P(5), 'nonpareil.npo')
    params:
        params = config['params']['nonpareil']['params']
    conda:
        '../envs/nonpareil.yaml'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt * 60 * 8,
        n = lambda wildcards, threads: threads,
        mem_mb_pt = lambda wildcards, attempt: attempt * 3000,
        mem_gb_pt = lambda wildcards, attempt: attempt * 3
    log:
        J(log_dir, 'nonpareil', P(5) + '.log')
    benchmark:
        J(bmk_dir, 'nonpareil', P(5) + '.txt')
    shell:
        """
        BASENAME=`dirname {output.npo}`"/nonpareil"
        nonpareil {params.params} \
           -R {resources.mem_mb_pt} \
           -t {threads} \
           -f fastq \
           -s {input.read1} \
           -b $BASENAME \
           2>> {log} 1>&2 || touch {output.npo} 
        """

rule nonpareil_summary:
    """
    Summarizing nonpareil data
    """
    input:
        Expand(J(coverage_dir, P(5), 'nonpareil.npo'),
               config['sim_params'])        
    output:
        curves = J(coverage_dir, 'nonpareil', 'all_curve.pdf'),
        rds = J(coverage_dir, 'nonpareil', 'all_summary.RDS'),
        txt = J(coverage_dir , 'nonpareil', 'all_summary.txt')
    params:
        exe = J(config['pipeline']['script_folder'], 'nonpareil_summary.R'),
        basename = J(coverage_dir, 'nonpareil', 'all'),
        params = config['params']['nonpareil']['summary']
    conda:
        '../envs/nonpareil.yaml'
    log:
        J(log_dir, 'nonpareil_summary.log')
    benchmark:
        J(bmk_dir, 'nonpareil_summary.txt')
    shell:
        """
        {params.exe} {params.params} {params.basename} \
           {input} 2> {log} 1>&2 
        """

