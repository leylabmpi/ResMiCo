if not skipped(config['params']['MGSIM']['genome_download']):
    localrules: MGSIM_genome_download    
    rule MGSIM_genome_download:
        """
        Using MGSIM to download the genomes
        """
        input:
            tbl = config['genomes_file']
        output:
            tbl = genomes_dir + 'genomes.tsv',
            fna = config['genomes_tbl']['Fasta']
        params:
            params = config['params']['MGSIM']['genome_download'],
            outdir = config['tmp_dir'] + 'ref_genomes'
        conda:
            '../envs/MGSIM.yaml'
        threads:
            12            
        log:
            log_dir + 'MGSIM_genome_download.log'
        benchmark:
            benchmark_dir + 'MGSIM_genome_download.txt'
        shell:
            """
            export PATH=$CONDA_PREFIX/bin:$PATH
            OUTDIR="{params.outdir}"
	    rm -rf $OUTDIR 2> {log}
            mkdir -p $OUTDIR 2>> {log}

            MGSIM genome_download {params.params} \
              -n {threads} -d $OUTDIR -r \
              {input.tbl} > {output.tbl} 2>> {log}
            """
else:
    localrules: MGSIM_genome_rename
    rule MGSIM_genome_rename:
        """
        Renaming genome fasta file names & sequence headers
        """
        input:
            tbl = config['genomes_file'],
            fna = config['genomes_tbl']['Fasta']
        output:
            tbl = genomes_dir + 'genomes.tsv'
        params:
            exe = config['pipeline']['script_folder'] + 'rename_genomes.py',
            outdir = config['tmp_dir'] + 'ref_genomes'
        conda:
            '../envs/MGSIM.yaml'
        log:
            log_dir + 'MGSIM_genome_rename.log'
        benchmark:
            benchmark_dir + 'MGSIM_genome_rename.txt'
        shell:
            """
            export PATH=$CONDA_PREFIX/bin:$PATH
            OUTDIR="{params.outdir}"
	    rm -rf $OUTDIR 2> {log}
            mkdir -p $OUTDIR >> {log}

            {params.exe} {input.tbl} $OUTDIR > {output.tbl} 2>> {log}
            """    

rule MGSIM_communities:
    """
    Using MGSIM to simulate communities
    """
    input:
        genomes_dir + 'genomes.tsv'
    output:
        abund = mgsim_dir + '{richness}/{rep}/comm_abund.txt',
        wAbund = mgsim_dir + '{richness}/{rep}/comm_wAbund.txt'
    params:
        richness = lambda wildcards: wildcards.richness,
        params = config['params']['MGSIM']['community']['other_params']
    conda:
        '../envs/MGSIM.yaml'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 4 + 4
    log:
        log_dir + 'MGSIM_communities/{richness}/{rep}.log'
    benchmark:
        benchmark_dir + 'MGSIM_communities/{richness}/{rep}.txt'
    shell:
        """       
        export PATH=$CONDA_PREFIX/bin:$PATH
        PREFIX=`dirname {output.abund}`"/comm"

        MGSIM communities {params.params} \
          --n-comm 1 --richness {params.richness} \
          {input} $PREFIX 2> {log} 1>&2
        """

rule MGSIM_reads:
    """
    Using MGSIM to simulate reads
    """
    input:
        wAbund = mgsim_dir + '{richness}/{rep}/comm_wAbund.txt',
        tbl = genomes_dir + 'genomes.tsv',     
    output:
        read1 = temp(config['tmp_dir'] + \
                     '{richness}/{rep}/{read_depth}/sim_reads/1/R1.fq'),
        read2 = temp(config['tmp_dir'] + \
                     '{richness}/{rep}/{read_depth}/sim_reads/1/R2.fq')
    params:
        params = config['params']['MGSIM']['reads'],
        read_depth = lambda wildcards: wildcards.read_depth
    conda:
        '../envs/MGSIM.yaml'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 60 * 24,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt * 2 + 2
    log:
        log_dir + 'MGSIM_reads/{richness}/{rep}/{read_depth}.log'
    benchmark:
        benchmark_dir + 'MGSIM_reads/{richness}/{rep}/{read_depth}.txt'
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        OUTDIR=`dirname {output.read1}`
        OUTDIR=`dirname $OUTDIR`
        TMPDIR=$OUTDIR"_tmp"
        mkdir -p $OUTDIR 2> {log}
        rm -rf $TMPDIR 2>> {log}
        mkdir -p $TMPDIR 2>> {log}

        MGSIM reads {params.params} \
          -n {threads} \
          --tmp-dir $TMPDIR \
          --sr-seq-depth {params.read_depth} \
          {input.tbl} {input.wAbund} $OUTDIR \
          2>> {log} 1>&2

        rm -rf $TMPDIR 2>> {log}
        """

rule MGSIM_read_filter:
    """
    Filtering reads via Skewer
    """
    input:
        read1 = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/1/R1.fq',
        read2 = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/1/R2.fq'
    output:
        read1 = temp(config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/R1.fq'),
        read2 = temp(config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/R2.fq')
    params:
        skewer = config['params']['skewer'],
        read1 = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/trimmed-pair1.fastq',
        read2 = config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/trimmed-pair2.fastq'
    conda:
        '../envs/bowtie2.yaml'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 1
    log:
        log_dir + 'map_read_filter/{richness}/{rep}/{read_depth}.log',    
    benchmark:
        benchmark_dir + 'map_read_filter/{richness}/{rep}/{read_depth}.txt'
    shell:
        """
        OUTDIR=`dirname {params.read1}`
        skewer --threads {threads} {params.skewer} \
          -o $OUTDIR"/" {input.read1} {input.read2} 2> {log} 1>&2
        mv {params.read1} {output.read1} 2>> {log} 1>&2
        mv {params.read2} {output.read2} 2>> {log} 1>&2
        """
        
rule MGSIM_compress_read1:
    """
    Compressing reads
    """
    input:
        config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/R1.fq'
    output:
        mgsim_dir + 'sim_reads/{richness}/{rep}/{read_depth}/Read1.fq.gz'
    params:
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        log_dir + 'MGSIM_compress_read1/{richness}/{rep}/{read_depth}.log'
    shell:
        """
        ionice {params.ionice} gzip -c {input} > {output} 2> {log}
        """

rule MGSIM_compress_read2:
    """
    Compressing reads
    """
    input:
        config['tmp_dir'] + '{richness}/{rep}/{read_depth}/sim_reads/R2.fq'
    output:
        mgsim_dir + 'sim_reads/{richness}/{rep}/{read_depth}/Read2.fq.gz'
    params:
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        log_dir + 'MGSIM_compress_read2/{richness}/{rep}/{read_depth}.log'
    shell:
        """
        ionice {params.ionice} gzip -c {input} > {output} 2> {log}
        """

