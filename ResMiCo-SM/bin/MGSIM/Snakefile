if not skipped(config['params']['MGSIM']['genome_download']):
    localrules: MGSIM_genome_download    
    rule MGSIM_genome_download:
        """
        Using MGSIM to download the genomes
        """
        input:
            tbl = config['genomes_file']
        output:
            tbl = genomes_dir + 'genomes.tsv',
            fna = config['genomes_tbl']['Fasta']
        params:
            params = config['params']['MGSIM']['genome_download'],
            outdir = config['tmp_dir'] + 'ref_genomes'
        conda:
            '../envs/MGSIM.yaml'
        threads:
            12            
        log:
            log_dir + 'MGSIM/genome_download.log'
        benchmark:
            benchmark_dir + 'MGSIM/genome_download.txt'
        shell:
            """
            export PATH=$CONDA_PREFIX/bin:$PATH
            OUTDIR="{params.outdir}"
	    rm -rf $OUTDIR 2> {log}
            mkdir -p $OUTDIR 2>> {log}

            MGSIM genome_download {params.params} \
              -n {threads} -d $OUTDIR -r \
              {input.tbl} > {output.tbl} 2>> {log}
            """

localrules: MGSIM_genome_rename
checkpoint MGSIM_genome_rename:
    """
    Renaming genome fasta file names & sequence headers
    """
    input:
        tbl = config['genomes_file'],
        fna = config['genomes_tbl']['Fasta']
    output:
        tbl = genomes_dir + 'genomes.tsv'
    params:
        exe = config['pipeline']['script_folder'] + 'rename_genomes.py',
        outdir = config['tmp_dir'] + 'ref_genomes'
    conda:
        '../envs/MGSIM.yaml'
    log:
        log_dir + 'MGSIM/genome_rename.log'
    benchmark:
        benchmark_dir + 'MGSIM/genome_rename.txt'
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        OUTDIR="{params.outdir}"
        rm -rf $OUTDIR 2> {log}
        mkdir -p $OUTDIR >> {log}

        {params.exe} {input.tbl} $OUTDIR > {output.tbl} 2>> {log}
        """    

def abund_dist_format(wildcards):
    """
    Formatting the parameter for usage in `MGSIM communities`
    """
    ad = re.sub(r'mean-', 'mean:', wildcards.abund_dist)
    ad = re.sub(r'-sigma-', ',sigma:', ad)
    return ad

def create_rand_seed(wildcards):
    if not skipped(config['params']['MGSIM']['community']['random_seed']):
        return random.randint(1,100000)
    else:
        return None
    
rule MGSIM_communities:
    """
    Using MGSIM to simulate communities
    """
    input:
        tsv = genomes_dir + 'genomes.tsv',
        fna = chpt_ref_genomes
    output:
        abund = J(mgsim_dir, '{richness}', '{abund_dist}', '{rep}', 'comm_abund.txt'),
        wAbund = J(mgsim_dir, '{richness}', '{abund_dist}', '{rep}', 'comm_wAbund.txt')
    params:
        richness = lambda wildcards: wildcards.richness,
        abund_dist = abund_dist_format,
        seed = lambda wildcards: create_rand_seed(wildcards),
        params = config['params']['MGSIM']['community']['other_sim_params']        
    conda:
        '../envs/MGSIM.yaml'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 4 + 4
    log:
        J(log_dir, 'MGSIM', 'communities', '{richness}', '{abund_dist}', '{rep}.log')
    benchmark:
        J(benchmark_dir, 'MGSIM', 'communities', '{richness}', '{abund_dist}', '{rep}.txt')
    shell:
        """       
        export PATH=$CONDA_PREFIX/bin:$PATH
        PREFIX=`dirname {output.abund}`"/comm"

        MGSIM communities {params.params} \
          --n-comm 1 \
          --rnd-seed {params.seed} \
          --richness {params.richness} \
          --abund-dist-p "{params.abund_dist}" \
          {input.tsv} $PREFIX 2> {log} 1>&2
        """

rule MGSIM_reads:
    """
    Using MGSIM to simulate reads
    """
    input:
        wAbund = mgsim_dir + '{richness}/{abund_dist}/{rep}/comm_wAbund.txt',
        tbl = genomes_dir + 'genomes.tsv',
        fna = chpt_ref_genomes
    output:
        read1 = temp(J(config['tmp_dir'], '{richness}', '{abund_dist}', '{rep}',
                       '{read_length}', '{read_depth}', 'sim_reads', 'illumina', '1', 'R1.fq')),
        read2 = temp(J(config['tmp_dir'], '{richness}', '{abund_dist}', '{rep}',
                       '{read_length}', '{read_depth}', 'sim_reads', 'illumina', '1', 'R2.fq'))
    params:
        params = config['params']['MGSIM']['reads']['other_sim_params'],
        read_length = lambda wildcards: wildcards.read_length,
        read_depth = lambda wildcards: wildcards.read_depth
    conda:
        '../envs/MGSIM.yaml'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 60 * 24,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt * 2 + 2
    log:
        J(log_dir, 'MGSIM', 'reads', '{richness}', '{abund_dist}', '{rep}',
          '{read_length}', '{read_depth}.log')
    benchmark:
        J(benchmark_dir, 'MGSIM', 'reads', '{richness}', '{abund_dist}', '{rep}',
          '{read_length}', '{read_depth}.txt')
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        OUTDIR=`dirname {output.read1}`
        OUTDIR=`dirname $OUTDIR`
        OUTDIR=`dirname $OUTDIR`
        TMPDIR=$OUTDIR"_tmp"
        mkdir -p $OUTDIR 2> {log}
        rm -rf $TMPDIR 2>> {log}
        mkdir -p $TMPDIR 2>> {log}

        MGSIM reads {params.params} \
          -n {threads} \
          --tmp-dir $TMPDIR \
          --art-len {params.read_length} \
          --sr-seq-depth {params.read_depth} \
          {input.tbl} {input.wAbund} $OUTDIR \
          2>> {log} 1>&2

        rm -rf $TMPDIR 2>> {log} 1>&2
        """

rule MGSIM_read_filter:
    """
    Filtering reads via Skewer
    """
    input:
        read1 = J(config['tmp_dir'] + '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                  '{read_depth}', 'sim_reads', 'illumina', '1', 'R1.fq'),
        read2 = J(config['tmp_dir'] + '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                  '{read_depth}', 'sim_reads', 'illumina', '1', 'R2.fq')
    output:
        read1 = temp(J(config['tmp_dir'], '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                       '{read_depth}', 'sim_reads', 'R1.fq')),
        read2 = temp(J(config['tmp_dir'], '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                       '{read_depth}', 'sim_reads', 'R2.fq')),
    params:
        skewer = config['params']['MGSIM']['reads']['skewer'],
        read1 = J(config['tmp_dir'], '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                  '{read_depth}', 'sim_reads', 'trimmed-pair1.fastq'),
        read2 = J(config['tmp_dir'], '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                  '{read_depth}', 'sim_reads', 'trimmed-pair2.fastq')
    conda:
        '../envs/bowtie2.yaml'
    threads:
        4
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 3
    log:
        J(log_dir, 'MGSIM', 'read_filter', '{richness}', '{abund_dist}', '{rep}',
          '{read_length}', '{read_depth}.log')
    benchmark:
        J(benchmark_dir, 'MGSIM', 'read_filter', '{richness}', '{abund_dist}', '{rep}',
          '{read_length}', '{read_depth}.txt')
    shell:
        """
        OUTDIR=`dirname {params.read1}`
        skewer --threads {threads} {params.skewer} \
          -o $OUTDIR"/" {input.read1} {input.read2} 2> {log} 1>&2
        mv {params.read1} {output.read1} 2>> {log} 1>&2
        mv {params.read2} {output.read2} 2>> {log} 1>&2
        """
        
rule MGSIM_compress_read1:
    """
    Compressing reads
    """
    input:
        J(config['tmp_dir'], '{richness}', '{abund_dist}', '{rep}', '{read_length}',
          '{read_depth}', 'sim_reads', 'R1.fq')
    output:
        J(mgsim_dir, 'sim_reads', '{richness}', '{abund_dist}', '{rep}', '{read_length}',
          '{read_depth}', 'Read1.fq.gz')
    params:
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        J(log_dir, 'MGSIM', 'compress_read1', '{richness}', '{abund_dist}', '{rep}',
          '{read_length}', '{read_depth}.log')
    shell:
        """
        ionice {params.ionice} gzip -c {input} > {output} 2> {log}
        """

rule MGSIM_compress_read2:
    """
    Compressing reads
    """
    input:
        J(config['tmp_dir'], '{richness}', '{abund_dist}', '{rep}', '{read_length}',
          '{read_depth}', 'sim_reads', 'R2.fq')
    output:
        J(mgsim_dir, 'sim_reads', '{richness}', '{abund_dist}', '{rep}', '{read_length}',
          '{read_depth}', 'Read2.fq.gz')
    params:
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        J(log_dir, 'MGSIM', 'compress_read2', '{richness}', '{abund_dist}', '{rep}',
          '{read_length}', '{read_depth}.log')
    shell:
        """
        ionice {params.ionice} gzip -c {input} > {output} 2> {log}
        """
          
