rule map_samtools_faidx:
    """
    Running samtools faidx on contigs (indexing)
    """
    input:
        config['tmp_dir'] + \
            '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}/contigs_filtered.fasta'
    output:
        temp(config['tmp_dir'] + \
             '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}/contigs_filtered.fasta.fai')
    params:
        exe = config['pipeline']['script_folder'] + 'is_empty.py'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 12
    conda:
        '../envs/bowtie2.yaml'
    log:
        log_dir + 'map/samtools_faidx/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + 'map/samtools_faidx/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.txt'
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        if [ `{params.exe} {input}` -eq 0 ]; then
          samtools faidx {input} 2> {log} 1>&2
        else
          echo "Input is empty; skipping" > {log}
          touch {output} 2>> {log}
        fi
        """

rule map_bowtie2_build:
    """
    Building bowtie2 index for metagenome assembly contigs
    """
    input:
        config['tmp_dir'] + \
            '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}/contigs_filtered.fasta'
    output:
        config['tmp_dir'] + \
            '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}/map_bowtie2_build.done'
    params:
        exe = config['pipeline']['script_folder'] + 'is_empty.py'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, threads: threads,
	mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 6
    conda:
        '../envs/bowtie2.yaml'
    log:
        log_dir + \
            'map/bowtie2_build/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + \
            'map/bowtie2_build/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.txt'
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
	PREF=`echo {input} | perl -pe 's/\.[^.]+$//'`

        if [ `{params.exe} {input}` -eq 0 ]; then
          bowtie2-build --threads {threads} \
            {input} $PREF 2> {log} 1>&2
        else
          echo "Input is empty; skipping" > {log}
        fi

        touch {output} 2>> {log}
        """
        
rule map_bowtie2:
    """
    Mapping reads from all samples to the metagenome assembly contigs
    """
    input:
        ref = config['tmp_dir'] + \
              '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}/contigs_filtered.fasta',
	done = config['tmp_dir'] + \
               '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}/map_bowtie2_build.done',
        read1 = config['tmp_dir'] + \
                '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/sim_reads/R1.fq',
        read2 = config['tmp_dir'] + \
                '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/sim_reads/R2.fq'
    output:
        bam = temp(config['tmp_dir'] + \
                   'map_tmp/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.bam')
    params:
        samtools = config['params']['map']['samtools'],
        bt2 = config['params']['map']['bowtie2'],
        exe = config['pipeline']['script_folder'] + 'is_empty.py'
    conda:
        '../envs/bowtie2.yaml'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt * 60 * 12,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 3
    log:
        bt2 = log_dir + 'map/bowtie2/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.log',    
        sam = log_dir + 'map/bowtie2_samtools/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + 'map/bowtie2/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.txt'
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        rm -f {log.sam} 2> {log}
	PREF=`echo {input.ref} | perl -pe 's/\.[^.]+$//'`
        TMPDIR=`dirname {output.bam}`
        
        if [ `{params.exe} {input.ref}` -eq 0 ]; then
          bowtie2 {params.bt2} -p {threads} -q --no-unal \
            -x $PREF -1 {input.read1} -2 {input.read2} 2>> {log.bt2} | \
            samtools view {params.samtools} -h -o - 2>> {log.sam}| \
            samtools sort -@ {threads} -T $TMPDIR -o - \
            > {output.bam} 2>> {log.sam}
        else
          echo "Input is empty; skipping" > {log}
          touch {output.bam} 2>> {log}
        fi
        """
        
rule map_index_bam:
    """
    Mapping reads from origin sample to the metagenome assembly contigs
    """
    input:
        bam = config['tmp_dir'] + \
              'map_tmp/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.bam'
    output:
        bai = temp(config['tmp_dir'] + \
                   'map_tmp/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.bam.bai')
    params:
        exe = config['pipeline']['script_folder'] + 'is_empty.py'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt * 2
    conda:
        '../envs/bowtie2.yaml'
    log:
        log_dir + \
            'map/index_bam/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + \
            'map/index_bam/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.txt'
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        if [ `{params.exe} {input.bam}` -eq 0 ]; then
          samtools index -@ {threads} {input.bam} 2> {log}
        else
          echo "Input is empty; skipping" > {log}
          touch {output.bai} 2>> {log}
        fi
        """

rule map_subsample_bam:
    """
    Subsampling BAM to max per-contig coverage
    """
    input:
        fna = config['tmp_dir'] + \
              '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}/contigs_filtered.fasta',
        fai = config['tmp_dir'] + \
              '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}/contigs_filtered.fasta.fai',
        bam = config['tmp_dir'] + \
              'map_tmp/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.bam',
        bai = config['tmp_dir'] + \
              'map_tmp/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.bam.bai'
    output:
        bam = temp(config['tmp_dir'] + \
                   'map-sub/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.bam'),
        tsv = map_dir + \
              '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}/contig_coverage.tsv'
    params:
        mc = config['params']['map']['max_coverage'],
        exe = config['pipeline']['script_folder'] + 'bam_subsample.py',
        exe_empty = config['pipeline']['script_folder'] + 'is_empty.py'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 * 12
    conda:
        '../envs/bowtie2.yaml'
    log:
        log_dir + 'map/bam_subsample/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + 'map/bam_subsample/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.txt'
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        if [ `{params.exe_empty} {input.fna}` -eq 0 ]; then
          {params.exe} -o {output.bam} -m {params.mc} {input.bam} {input.fna} > {output.tsv} 2> {log}
        else
          echo "Input is empty; skipping" > {log}
          touch {output.bam} {output.tsv} 2>> {log}
        fi
        """

rule map_sort_subsampled_bam:
    """
    Mapping reads from origin sample to the metagenome assembly contigs
    """
    input:
        config['tmp_dir'] + \
            'map-sub/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.bam'
    output:
        temp(config['tmp_dir'] + \
             'map/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.bam')
    params:
        exe = config['pipeline']['script_folder'] + 'is_empty.py'
    threads:
        4
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt * 4
    conda:
        '../envs/bowtie2.yaml'
    log:
        log_dir + \
            'map/sort_subsampled_bam/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + \
            'map/sort_subsampled_bam/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.txt'
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        TMPDIR=`dirname {output}`
        if [ `{params.exe} {input}` -eq 0 ]; then
          samtools sort -@ {threads} -T $TMPDIR -o {output} {input} 2> {log} 1>&2
        else
          echo "Input empty; skipping" > {log}
          touch {output} 2>> {log}
        fi
        """
         
rule map_index_subsampled_bam:
    """
    Mapping reads from origin sample to the metagenome assembly contigs
    """
    input:
        bam = config['tmp_dir'] + \
              'map/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.bam'
    output:
        bai = config['tmp_dir'] + \
              'map/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.bam.bai'
    params:
        exe = config['pipeline']['script_folder'] + 'is_empty.py'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt * 2
    conda:
        '../envs/bowtie2.yaml'
    log:
        log_dir + \
            'map/index_subsampled_bam/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.log'
    benchmark:
        benchmark_dir + \
            'map/index_subsampled_bam/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.txt'
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        if [ `{params.exe} {input.bam}` -eq 0 ]; then
          samtools index -@ {threads} {input.bam} 2> {log}
        else
          echo "Input is empty; skipping" > {log}
          touch {output.bai} 2> {log}
        fi
        """
        
rule map_bam_copy:
    """
    Copying bam to permanent dir
    """
    input:
        config['tmp_dir'] + 'map/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.bam'
    output:
        map_dir + '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.bam'
    params:
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 2 + 4
    log:
        log_dir + 'map/bam_copy/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/{assembler}.log'
    shell:
        """
        ionice {params.ionice} cp -f {input} {output} 2> {log}
        """
        

