def map_contigs_subsample_input(wildcards):
    d = {}
    if config['input_type'] == 'real data':
        d['base'] = J(config['tmp_dir'], 'genomes', '{abund_dist}.fna')
    d['fna'] = J(config['tmp_dir'], P(6), 'contigs_filtered.fasta')
    return d

rule map_contigs_subsample:
    """
    Subsampling contigs
    """
    input:
        unpack(map_contigs_subsample_input)
    output:
        fna = temp(J(config['tmp_dir'], P(), 'contigs_filtered_sub.fasta'))
    params:
        exe = J(config['pipeline']['script_folder'], 'is_empty.py'),
        frac = '{contig_frac}'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 * 12
    conda:
        '../envs/bowtie2.yaml'
    log:
        J(log_dir, 'map', 'contigs_subsample', P() + '.log')
    benchmark:
        J(bmk_dir, 'map', 'contigs_subsample', P() + '.txt')
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        if [ `{params.exe} {input.fna}` -eq 0 ]; then
          seqkit sample -s 7172 -p {params.frac} {input.fna} > {output.fna}
        else
          echo "Input is empty; skipping" > {log}
          touch {output.fna} 2>> {log}
        fi
        """    
        
rule map_samtools_faidx:
    """
    Running samtools faidx on contigs (indexing)
    """
    input:
        fna = J(config['tmp_dir'], P(), 'contigs_filtered_sub.fasta')
    output:
        fai = temp(J(config['tmp_dir'], P(), 'contigs_filtered_sub.fasta.fai'))
    params:
        exe = J(config['pipeline']['script_folder'], 'is_empty.py')
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 12
    conda:
        '../envs/bowtie2.yaml'
    log:
        J(log_dir, 'map', 'samtools_faidx', P() + '.log')
    benchmark:
        J(bmk_dir, 'map', 'samtools_faidx', P() + '.txt')
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        if [ `{params.exe} {input.fna}` -eq 0 ]; then
          samtools faidx {input.fna} 2> {log} 1>&2
        else
          echo "Input is empty; skipping" > {log}
          touch {output.fai} 2>> {log}
        fi
        """

rule map_bowtie2_build:
    """
    Building bowtie2 index for metagenome assembly contigs
    """
    input:
        fna = J(config['tmp_dir'], P(), 'contigs_filtered_sub.fasta')
    output:
        J(config['tmp_dir'], P(), 'map_bowtie2_build.done')
    params:
        exe = J(config['pipeline']['script_folder'], 'is_empty.py')
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, threads: threads,
	mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 6
    conda:
        '../envs/bowtie2.yaml'
    log:
        J(log_dir, 'map', 'bowtie2_build', P() + '.log')
    benchmark:
        J(bmk_dir, 'map', 'bowtie2_build', P() + '.txt')
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
	PREF=`echo {input.fna} | perl -pe 's/\.[^.]+$//'`

        if [ `{params.exe} {input.fna}` -eq 0 ]; then
          bowtie2-build --threads {threads} \
            {input.fna} $PREF 2> {log} 1>&2
        else
          echo "Input is empty; skipping" > {log}
        fi
        touch {output} 2>> {log}
        """

def map_bowtie2_input(wildcards):
    # ref contigs
    #d = map_samtools_faidx_input(wildcards)
    d = {'fna' :  J(config['tmp_dir'], P(), 'contigs_filtered_sub.fasta')}
    d['done'] = J(config['tmp_dir'], P(), 'map_bowtie2_build.done')
    # reads
    if config['input_type'] == 'simulation':
        # simulated reads
        d['read1'] = J(config['tmp_dir'], P(5), 'sim_reads', 'R1.fq'),
        d['read2'] = J(config['tmp_dir'], P(5), 'sim_reads', 'R2.fq')
    else:
        if skipped(config['nonsim_params']['subsample_reads']):
            # no subsampling of real reads
            d['base_read1'] = J(config['tmp_dir'], 'reads', '{richness}', 'R1.fq')
            d['base_read2'] = J(config['tmp_dir'], 'reads', '{richness}', 'R2.fq')
        else:
            # subsampling of real reads
            d['base_read1'] = J(config['tmp_dir'], 'reads_sub', '{richness}', 'R1.fq')
            d['base_read2'] = J(config['tmp_dir'], 'reads_sub', '{richness}', 'R2.fq')
        # symlinks of real reads
        d['read1'] = J(config['tmp_dir'], P(5), 'real_reads', 'R1.fq'),
        d['read2'] = J(config['tmp_dir'], P(5), 'real_reads', 'R2.fq')
    return d
        
rule map_bowtie2:
    """
    Mapping reads from all samples to the metagenome assembly contigs
    """
    input:
        unpack(map_bowtie2_input)
    output:
        bam = temp(J(config['tmp_dir'], 'map_tmp', P() + '.bam'))
    params:
        samtools = config['params']['map']['samtools'],
        bt2 = config['params']['map']['bowtie2'],
        exe = J(config['pipeline']['script_folder'], 'is_empty.py')
    conda:
        '../envs/bowtie2.yaml'
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt * 60 * 12,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 + 3
    log:
        bt2 = J(log_dir, 'map', 'bowtie2', P() + '.log'),
        sam = J(log_dir, 'map', 'bowtie2_samtools', P() + '.log')
    benchmark:
        J(benchmark_dir, 'map', 'bowtie2', P() + '.txt')
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        rm -f {log.sam} 2> {log}
	PREF=`echo {input.fna} | perl -pe 's/\.[^.]+$//'`
        TMPDIR=`dirname {output.bam}`
        
        if [ `{params.exe} {input.fna}` -eq 0 ]; then
          bowtie2 {params.bt2} -p {threads} -q --no-unal \
            -x $PREF -1 {input.read1} -2 {input.read2} 2>> {log.bt2} | \
            samtools view {params.samtools} -h -o - 2>> {log.sam}| \
            samtools sort -@ {threads} -T $TMPDIR -o - \
            > {output.bam} 2>> {log.sam}
        else
          echo "Input is empty; skipping" > {log}
          touch {output.bam} 2>> {log}
        fi
        """
        
rule map_index_bam:
    """
    Mapping reads from origin sample to the metagenome assembly contigs
    """
    input:
        bam = J(config['tmp_dir'], 'map_tmp', P() + '.bam')
    output:
        bai = temp(J(config['tmp_dir'], 'map_tmp', P() + '.bam.bai'))
    params:
        exe = J(config['pipeline']['script_folder'], 'is_empty.py')
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt * 2
    conda:
        '../envs/bowtie2.yaml'
    log:
        J(log_dir, 'map', 'index_bam', P() + '.log')
    benchmark:
        J(bmk_dir, 'map', 'index_bam', P() + '.txt')
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        if [ `{params.exe} {input.bam}` -eq 0 ]; then
          samtools index -@ {threads} {input.bam} 2> {log}
        else
          echo "Input is empty; skipping" > {log}
          touch {output.bai} 2>> {log}
        fi
        """

def map_subsample_bam_input(wildcards):
    d = map_bowtie2_input(wildcards)
    d['bam'] = J(config['tmp_dir'], 'map_tmp', P() + '.bam'),
    d['bai'] = J(config['tmp_dir'], 'map_tmp', P() + '.bam.bai')
    return d
        
rule map_subsample_bam:
    """
    Subsampling BAM to max per-contig coverage
    """
    input:
        unpack(map_subsample_bam_input)
    output:
        bam = temp(J(config['tmp_dir'], 'map-sub', P() + '.bam')),
        tsv = J(map_dir, P(), 'contig_coverage.tsv')
    params:
        mc = config['params']['map']['max_coverage'],
        exe = J(config['pipeline']['script_folder'], 'bam_subsample.py'),
        exe_empty = J(config['pipeline']['script_folder'], 'is_empty.py')
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt ** 2 * 12
    conda:
        '../envs/bowtie2.yaml'
    log:
        J(log_dir, 'map', 'bam_subsample', P() + '.log')
    benchmark:
        J(bmk_dir, 'map', 'bam_subsample', P() + '.txt')
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        if [ `{params.exe_empty} {input.fna}` -eq 0 ]; then
          {params.exe} -o {output.bam} -m {params.mc} \
            {input.bam} {input.fna} > {output.tsv} 2> {log}
        else
          echo "Input is empty; skipping" > {log}
          touch {output.bam} {output.tsv} 2>> {log}
        fi
        """

rule map_sort_subsampled_bam:
    """
    Mapping reads from origin sample to the metagenome assembly contigs
    """
    input:
        J(config['tmp_dir'], 'map-sub', P() + '.bam')
    output:
        temp(J(config['tmp_dir'], 'map', P() + '.bam'))
    params:
        exe = J(config['pipeline']['script_folder'], 'is_empty.py')
    threads:
        4
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt * 4
    conda:
        '../envs/bowtie2.yaml'
    log:
        J(log_dir, 'map', 'sort_subsampled_bam', P() + '.log')
    benchmark:
        J(bmk_dir, 'map', 'sort_subsampled_bam', P() + '.txt')
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        TMPDIR=`dirname {output}`
        if [ `{params.exe} {input}` -eq 0 ]; then
          samtools sort -@ {threads} -T $TMPDIR -o {output} {input} 2> {log} 1>&2
        else
          echo "Input empty; skipping" > {log}
          touch {output} 2>> {log}
        fi
        """
         
rule map_index_subsampled_bam:
    """
    Mapping reads from origin sample to the metagenome assembly contigs
    """
    input:
        bam = J(config['tmp_dir'], 'map', P() + '.bam')
    output:
        bai = J(config['tmp_dir'], 'map', P() + '.bam.bai')
    params:
        exe = J(config['pipeline']['script_folder'], 'is_empty.py')
    threads:
        8
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt * 2
    conda:
        '../envs/bowtie2.yaml'
    log:
        J(log_dir, 'map', 'index_subsampled_bam', P() + '.log')
    benchmark:
        J(benchmark_dir, 'map', 'index_subsampled_bam', P() + '.txt')
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        if [ `{params.exe} {input.bam}` -eq 0 ]; then
          samtools index -@ {threads} {input.bam} 2> {log}
        else
          echo "Input is empty; skipping" > {log}
          touch {output.bai} 2> {log}
        fi
        """
        
rule map_bam_copy:
    """
    Copying bam to permanent dir
    """
    input:
        bam = J(config['tmp_dir'], 'map', P() + '.bam'),
        bai = J(config['tmp_dir'], 'map', P() + '.bam.bai')
    output:
        bam = J(map_dir, P(), 'mapped.bam'),
        bai = J(map_dir, P(), 'mapped.bam.bai')
    params:
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 2 + 4
    log:
        J(log_dir, 'map', 'bam_copy', P() + '.log')
    shell:
        """
        ionice {params.ionice} cp -f {input.bam} {output.bam} 2> {log} 1>&2
        ionice {params.ionice} cp -f {input.bai} {output.bai} 2>> {log} 1>&2
        """

rule map_bam2bigwig:
    """
    Converting bam to bigwig
    """
    input:
        bam = J(config['tmp_dir'], 'map', P() + '.bam'),
        bai = J(config['tmp_dir'], 'map', P() + '.bam.bai')
    output:
        bw = J(map_dir, P(), 'mapped.bw')
    params:
        ionice = config['params']['ionice']
    threads:
        4
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt * 12
    conda:
        '../envs/bowtie2.yaml'
    log:
        J(log_dir, 'map', 'bam2bigwig', P() + '.log')
    benchmark:
        J(benchmark_dir, 'map', 'bam2bigwig', P() + '.txt')
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        ionice {params.ionice} \
          bamCoverage -p {threads} -b {input.bam} -o {output.bw} 2> {log} 1>&2
        """

def map_copy_fai_input(wildcards):
    #d = map_samtools_faidx_input(wildcards)
    d = {'fna' : J(config['tmp_dir'], P(), 'contigs_filtered_sub.fasta')}
    d['fai'] = J(config['tmp_dir'], P(), 'contigs_filtered_sub.fasta.fai')
    return d
        
rule map_copy_fai:
    """
    Copying fai + associated fasta to final directory
    """
    input:
        unpack(map_copy_fai_input)
    output:
        fna = J(map_dir, P(), 'contigs.fasta'),
        fai = J(map_dir, P(), 'contigs.fasta.fai')
    params:
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 8
    log:
        J(log_dir, 'map', 'copy_fai', P() + '.log')
    shell:
        """
        ionice {params.ionice} cp -f {input.fna} {output.fna} 2> {log} 1>&2
        ionice {params.ionice} cp -f {input.fai} {output.fai} 2>> {log} 1>&2
        """

