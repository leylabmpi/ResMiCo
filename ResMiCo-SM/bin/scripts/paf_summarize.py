#!/usr/bin/env python
from __future__ import print_function
import sys,os
import argparse
import logging

desc = 'Summarize PAF file generated by minimap2'
epi = """DESCRIPTION:
Summarize PAF file (see https://github.com/lh3/miniasm/blob/master/PAF.md)
to get information such as:

* chimeric contig (Supplementary alignments; SAM 0x800)
  * note: assuming `minimap2 --secondary=no` was used 
* edit distance
  * NM tag (#mismatches + #I + #D + #ambiguous_bases) normalized by query aln length

# Notes

* assuming that hits are ordered by queryiD!
* the edit distance of chimeric contigs will be combined
  * thus, just one entry per contig

# Info

Example minimap2 run: `minimap2 --secondary=no -c ref.fasta query.fasta > aln.paf`

## Output table columns

* 'query' = query (contig) ID
* 'chimeric' = supplementary alignments?
* 'num_hits' = number of primary + supplementary alignments
* 'query_hit_len' = total query hit length (all alignments summed)
* 'edit_dist' = "NM" tag in minimap2 (summed for all alignments
* 'edit_dist_norm' = edit_dist / query_hit_len
"""
parser = argparse.ArgumentParser(description=desc,
                                 epilog=epi,
                                 formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('paf_file', metavar='paf_file', type=str,
                    help='PAF file generated by minimap2')
parser.add_argument('--version', action='version', version='0.0.1')
#For default: (default: %(default)s)


logging.basicConfig(format='%(asctime)s - %(message)s', level=logging.DEBUG)


def score_hits(hits):
    chimeric = len(hits) > 1
    query = hits[0][0]
    query_hit_len_sum = sum([x[1] for x in hits])
    nm_sum = sum([x[2] for x in hits])                
    edit_dist = nm_sum / query_hit_len_sum
    print('\t'.join([query,
                     str(chimeric),
                     str(len(hits)),
                     str(query_hit_len_sum),
                     str(nm_sum),
                     str(edit_dist)]))

def main(args):
    header = ['query', 'chimeric', 'num_hits',
              'query_hit_len', 'edit_dist', 'edit_dist_norm']
    print('\t'.join(header))
    hits = [[None]]   # [queryID, query_hit_len, nm]
    with open(args.paf_file) as inF:
        for i,line in enumerate(inF):
            # parsing line
            line = line.rstrip().split('\t')
            query = line[0]
            query_len = int(line[1])
            query_hit_len = int(line[3]) - int(line[2])
            nm = line[12].split(':')
            if len(nm) != 3:
                msg = 'NM tag not formatted correctly (line {})'
                raise ValueError(msg.format(i))
            # scoring
            if query == hits[0][0]:
                hits.append([query, int(query_hit_len), int(nm[2])])
            else:
                if i > 0:
                    score_hits(hits)
                hits = [[query, int(query_hit_len), int(nm[2])]]
                
    score_hits(hits)
                

if __name__ == '__main__':
    args = parser.parse_args()
    main(args)


