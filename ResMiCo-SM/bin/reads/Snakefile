# if user provides reads instead of using MGSIM to generate them

rule copy_provided_reads:
    """
    Uncompressing reads
    """
    input:
        read1 = lambda wildcards: config['reads_tbl'].loc[config['reads_tbl'].Sample == wildcards.richness, 'Read1'].unique().tolist(),
        read2 = lambda wildcards: config['reads_tbl'].loc[config['reads_tbl'].Sample == wildcards.richness, 'Read2'].unique().tolist()
    output:
    	read1 = config['tmp_dir'] + \
                '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/sim_reads/R1.fq',
	read2 = config['tmp_dir'] + \
                '{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}/sim_reads/R2.fq'
    params:
        ionice = config['params']['ionice']
    log:
        log_dir + 'copy_provided_reads/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}.log'
    benchmark:
        benchmark_dir + 'copy_provided_reads/{richness}/{abund_dist}/{rep}/{read_length}/{read_depth}.txt'
    shell:
        """
        ionice {params.ionice} seqkit seq {input.read1} > {output.read1} 2> {log}
        ionice {params.ionice} seqkit seq {input.read2} > {output.read2} 2>> {log}
        """

if not skipped(config['params']['MGSIM']['genome_download']):
    localrules: genome_download    
    rule genome_download:
        """
        Using MGSIM to download the genomes
        """
        input:
            tbl = config['genomes_file']
        output:
            tbl = genomes_dir + 'genomes.tsv',
            fna = config['genomes_tbl']['Fasta']
        params:
            params = config['params']['MGSIM']['genome_download'],
            outdir = config['tmp_dir'] + 'ref_genomes'
        conda:
            '../envs/MGSIM.yaml'
        threads:
            12
        log:
            log_dir + 'MGSIM/genome_download.log'
        benchmark:
            benchmark_dir + 'MGSIM/genome_download.txt'
        shell:
            """
            export PATH=$CONDA_PREFIX/bin:$PATH
            OUTDIR="{params.outdir}"
	    rm -rf $OUTDIR 2> {log}
            mkdir -p $OUTDIR 2>> {log}

            MGSIM genome_download {params.params} \
              -n {threads} -d $OUTDIR -r \
              {input.tbl} > {output.tbl} 2>> {log}
            """
else:
    localrules: genome_rename
    rule genome_rename:
        """
        Renaming genome fasta file names & sequence headers
        """
        input:
            tbl = config['genomes_file'],
            fna = config['genomes_tbl']['Fasta']
        output:
            tbl = genomes_dir + 'genomes.tsv'
        params:
            exe = config['pipeline']['script_folder'] + 'rename_genomes.py',
            outdir = config['tmp_dir'] + 'ref_genomes'
        conda:
            '../envs/MGSIM.yaml'
        log:
            log_dir + 'genome_rename.log'
        benchmark:
            benchmark_dir + 'genome_rename.txt'
        shell:
            """
            export PATH=$CONDA_PREFIX/bin:$PATH
            OUTDIR="{params.outdir}"
	    rm -rf $OUTDIR 2> {log}
            mkdir -p $OUTDIR >> {log}

            {params.exe} {input.tbl} $OUTDIR > {output.tbl} 2>> {log}
            """    

localrules: create_comm
rule create_comm:
    """
    Creating comm file to use for metaquast
    """
    input:
        genomes = genomes_dir + 'genomes.tsv'
    output:
        comm = mgsim_dir + '{richness}/{abund_dist}/{rep}/comm_wAbund.txt'
    run:
        import os,sys
        # get all taxa
        taxa = []
        header = {}
        with open(input.genomes) as inF:
            for i,line in enumerate(inF):
                line = line.rstrip().split('\t')
                if i == 0:
                    header = {x:ii for ii,x in enumerate(line)}
                    continue
                taxa.append(line[header['Taxon']])
        # creating table
        with open(output.comm, 'w') as outF:
            line = '\t'.join(['Community','Taxon','Perc_rel_abund','Rank'])
            outF.write(line + '\n')
            for i,taxon in enumerate(taxa):
                line = [1, taxon, 100.0 / len(taxa), i+1]
                line = '\t'.join([str(x) for x in line])
                outF.write(line + '\n')
            
            
