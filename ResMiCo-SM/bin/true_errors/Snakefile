rule combine_ref_genomes:
    """
    Combining reference genomes.
    Only using those included in the metagenome community
    """
    input:
        fna = config['genomes_file'],
        comm = mgsim_dir + '{richness}/{abund_dist}/{rep}/comm_wAbund.txt'
    output:
        temp(config['tmp_dir'] + '{richness}/{abund_dist}/{rep}/refs/ref_genomes.fna')
    params:
        exe = config['pipeline']['script_folder'] + 'concat_ref_genomes.py',
	genomes_dir = genomes_dir        
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        log_dir + 'combine_ref_genomes/{richness}/{abund_dist}/{rep}.log'
    benchmark:
        benchmark_dir + 'combine_ref_genomes/{richness}/{abund_dist}/{rep}.txt'
    shell:
        """
        OUTDIR=`dirname {output}`
        rm -rf $OUTDIR 2> {log}
        mkdir -p $OUTDIR 2>> {log}
        
        {params.exe} {input.fna} \
           {input.comm} {params.genomes_dir} \
           > {output} 2>> {log}
        """

localrules: metaquast_ref_genomes
checkpoint metaquast_ref_genomes:
    """
    Creating ref genome set for just those genomes with non-zero
    abundances in the simulated community.
    The genomes will be symlinked to a specific ref directory
    """
    input:
        refs = genomes_dir + 'genomes.tsv',
        abund = J(mgsim_dir, '{richness}', '{abund_dist}', '{rep}', 'comm_wAbund.txt')
    output:
        refs = temp(J(config['tmp_dir'], 'metaquast', '{richness}', '{abund_dist}',
                      '{rep}', 'genomes', 'genomes.tsv'))
    params:
        exe = config['pipeline']['script_folder'] + 'genome_symlink.py'
    log:
        J(log_dir, 'metaquast_ref_genomes', '{richness}', '{abund_dist}', '{rep}.log')
    shell:
        """
        OUTDIR=`dirname {output.refs}`
        rm -rf $OUTDIR 2> {log}
        mkdir -p $OUTDIR 2>> {log}
        {params.exe} --copy {input.refs} {input.abund} $OUTDIR > {output.refs} 2>> {log}
        """

def metaquast_mem(wildcards, input, threads, attempt):
    # getting number of references
    n_refs = 0
    with open(input.refs) as inF:
        for line in inF:
            n_refs += 1
    # calc mem (Gb)
    try:
        read_depth_mem = float(wildcards.read_depth) / 1000000 * 10
    except ValueError:
        read_depth_mem = float(8e6) / 1000000 * 10        
    mem_total = 0.05 * n_refs + read_depth_mem + attempt ** 2 * 10    
    return int(round(mem_total / threads, 0))

def metaquast_time(wildcards, input, threads, attempt):
    # getting number of references
    n_refs = 0
    with open(input.refs) as inF:
        for line in inF:
            n_refs += 1
    # calc time (minutes)
    try:
        read_depth_time_min = float(wildcards.read_depth) / 1000000 * 60 * 2
    except ValueError:
        read_depth_time_min = float(8e6) / 1000000 * 60 * 2
    T_min = n_refs + read_depth_time_min + 720 * attempt + 480
    return int(round(T_min,0))
    
rule metaquast:
    """
    MetaQUAST assessment of assemblies
    """
    input:
        contigs = J(config['tmp_dir'], '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                    '{read_depth}', '{assembler}', 'contigs_filtered.fasta'),
        refs = J(config['tmp_dir'], 'metaquast', '{richness}', '{abund_dist}', '{rep}',
                 'genomes', 'genomes.tsv'),
        genomes = chpt_mq_ref_genomes
    output:
        info_tmp = temp(J(config['tmp_dir'], 'metaquast', '{richness}', '{abund_dist}',
                          '{rep}', '{read_length}', '{read_depth}', '{assembler}',
                          'combined_reference', 'contigs_reports',
	                  'contigs_report_contigs_filtered.mis_contigs.info')),
        fasta_tmp = temp(J(config['tmp_dir'], 'metaquast', '{richness}', '{abund_dist}',
                           '{rep}', '{read_length}', '{read_depth}', '{assembler}',
                           'combined_reference', 'contigs_reports',
                           'contigs_filtered.mis_contigs.fa')),
        done_tmp = touch(J(config['tmp_dir'], 'metaquast', '{richness}', '{abund_dist}',
                           '{rep}', '{read_length}', '{read_depth}', '{assembler}',
                           'metaquast.done')),
        info = J(true_errors_dir, '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                 '{read_depth}', '{assembler}', 'combined_reference', 'contigs_reports',
	         'contigs_report_contigs_filtered.mis_contigs.info'),
        fasta = J(true_errors_dir, '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                  '{read_depth}', '{assembler}', 'combined_reference', 'contigs_reports',
                  'contigs_filtered.mis_contigs.fa'),
        done = touch(J(true_errors_dir, '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                       '{read_depth}', '{assembler}', 'metaquast.done'))
    params:
        params = config['params']['asmbl_errors']['metaquast'],
        exe = config['pipeline']['script_folder'] + 'metaquast_short.py',
        ionice = config['params']['ionice'],
        exe_empty = config['pipeline']['script_folder'] + 'is_empty.py'
    threads:
        8
    resources:
        time = metaquast_time,
        n = lambda wildcards, threads: threads,
        mem_gb_pt = metaquast_mem
    conda:
        '../envs/quast.yaml'	
    log:
        J(log_dir, 'metaquast', '{richness}', '{abund_dist}', '{rep}', '{read_length}',
          '{read_depth}', '{assembler}.log')
    benchmark:
        J(benchmark_dir, 'metaquast', '{richness}', '{abund_dist}', '{rep}', '{read_length}',
          '{read_depth}', '{assembler}.txt')
    shell:
        """
        export PATH=$CONDA_PREFIX/bin:$PATH
        # params
        REFDIR=`dirname {input.refs}`
        TMPOUTDIR=`dirname {output.done_tmp}`
        OUTDIR=`dirname {output.done}`
        # removing existing metaquast output
        rm -rf $TMPOUTDIR"/combined_reference/" 2> {log}        
        rm -rf $TMPOUTDIR"/runs_per_reference/" 2>> {log}
        rm -rf $OUTDIR"/combined_reference/" 2> {log}        
        rm -rf $OUTDIR"/runs_per_reference/" 2>> {log}

        if [ `{params.exe_empty} {input.contigs}` -eq 0 ]; then
          # metaquast run
          {params.exe} -t {threads} {params.params}  \
            --max-ref-number 0 --no-gzip \
            -o $TMPOUTDIR -r $REFDIR \
            {input.contigs} 2>> {log} 1>&2
          # copying to final destination
          mkdir -p $OUTDIR 2>> {log}
          rm -rf $TMPOUTDIR/quast_corrected_input 2>> {log}
          ionice {params.ionice} cp -rf $TMPOUTDIR/* $OUTDIR 2>> {log} 
          touch {output.done_tmp} {output.done} 2>> {log}
        else
          echo "Input empty; skipping" > {log}
          mkdir -p `dirname {output.info_tmp}` 2>> {log}
          mkdir -p `dirname {output.info}` 2>> {log}
          touch {output.info_tmp} {output.fasta_tmp} {output.done_tmp} 2>> {log}
          touch {output.info} {output.fasta} {output.done} 2>> {log}
        fi
        """
 
localrules: metaquast_ref_genomes_rm        
rule metaquast_ref_genomes_rm:
    """
    Removing ref genome files
    """
    input:
        refs = J(config['tmp_dir'], 'metaquast', '{richness}', '{abund_dist}', '{rep}',
                 'genomes', 'genomes.tsv'),
        done = Expand(J(true_errors_dir, '{richness}', '{abund_dist}', '{rep}',
                        '{read_length}', '{read_depth}', '{assembler}', 'metaquast.done'),
                      config['sim_params']),
        fna = chpt_mq_ref_genomes,
    output:
        done = J(true_errors_dir, '{richness}', '{abund_dist}', '{rep}',
                 'metaquast_cleanup.done')
    run:
        import os,sys
        for F in input.fna:
            if os.path.isfile(F):
                os.unlink(F)
        open(output.done, 'w').close()

if config['reads_tbl'] is None:
    localrules: ref_genomes_rm
    rule ref_genomes_rm:
        """
        Removing ref genome files
        """
        input:
            done = Expand(J(true_errors_dir, '{richness}', '{abund_dist}', '{rep}',
                            'metaquast_cleanup.done'),
                          config['sim_params']),
            fna = chpt_ref_genomes
        output:
            done = genomes_dir + 'genomes_rm.done'
        run:
            import os,sys
            for F in input.fna:
                if os.path.isfile(F):
                    os.unlink(F)
            open(output.done, 'w').close()
    
