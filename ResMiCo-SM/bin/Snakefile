def chpt_ref_genomes(wildcards):
    """
    Checkpointing for compiled ref genome files for metaQUAST 
    """
    chpt_out = checkpoints.MGSIM_genome_rename.get(**wildcards).output[0]
    d = os.path.join(config['tmp_dir'] + 'ref_genomes')
    files = glob.glob(os.path.join(d, '*.fna'))
    if len(files) < 1:
        sys.stderr.write('WARNING: No ref genomes found. This is generally OK\n')
    return files

def chpt_mq_ref_genomes(wildcards):
    """
    Checkpointing for compiled ref genome files for metaQUAST 
    """
    chpt_out = checkpoints.metaquast_ref_genomes.get(**wildcards).output[0]
    d = os.path.join(config['tmp_dir'],  'metaquast', wildcards.richness,
                      wildcards.abund_dist, wildcards.rep, 'genomes')
    files = glob.glob(os.path.join(d, '*.fna'))
    if len(files) < 1:
        sys.stderr.write('WARNING: No ref genomes for metaQUAST found. This is generally OK\n')
    return files

def all_bam_files(wildcards):
    genomes_tbl = config['genomes_tbl']
    out_files = []
    for i,x in genomes_tbl.iterrows():
        f = '{genome}/{sample}.bam'
	f = f.format(genome=x['Taxon'], sample=x['Sample'])
	f = map_dir + f
	out_files.append(f)
    return out_files

def all_which_input(wildcards):
    F = []

    # no simulation (gs_map)
    if config['just_features']:
        # feature table        
        F.append(map_dir + 'feature_files.tsv')
        # keep BAM files?
        if str(config['nonsim_params']['keep_bam']).lower() == 'true':
            F += all_bam_files(wildcards)
        return F
    
    # reads
    if (str(config['params']['MGSIM']['reads']['keep_reads']).lower() == 'true' and
        config['reads_tbl'] is None):
        F += Expand(J(mgsim_dir, 'sim_reads', '{richness}', '{abund_dist}', '{rep}',
                      '{read_length}', '{read_depth}', 'Read1.fq.gz'),
                    config['sim_params'])
        F += Expand(J(mgsim_dir, 'sim_reads', '{richness}', '{abund_dist}', '{rep}',
                      '{read_length}', '{read_depth}', 'Read2.fq.gz'),
                    config['sim_params'])
        F.append(J(mgsim_dir, 'sim_reads', 'seqkit_stats.tsv'))
        
    # coverage
    if not skipped(config['params']['nonpareil']['params']):
        F += Expand(J(coverage_dir, '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                      '{read_depth}', 'nonpareil.npo'),
                   config['sim_params'])  
        if not skipped(config['params']['nonpareil']['summary']):
            F.append(coverage_dir + 'nonpareil/all_summary.RDS')
            F.append(coverage_dir + 'nonpareil/all_summary.txt')
            F.append(coverage_dir + 'nonpareil/all_curve.pdf')
            
    # MG assemblies
    F += Expand(J(asmbl_dir, '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                  '{read_depth}', '{assembler}', 'contigs_filtered.fasta.gz'),
               config['sim_params'])
    
    ## metaquast
    if not skipped(config['params']['asmbl_errors']['metaquast']):        
        F += Expand(J(true_errors_dir, '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                      '{read_depth}', '{assembler}', 'metaquast.done'),
                    config['sim_params'])
        if not is_true(config['params']['asmbl_errors']['keep_genomes']):
            F += Expand(J(true_errors_dir, '{richness}', '{abund_dist}', '{rep}',
                          'metaquast_cleanup.done'),
                        config['sim_params'])
            if config['reads_tbl'] is None:
                F.append(genomes_dir + 'genomes_rm.done')
        
    # read mapping to contigs
    if not skipped(config['params']['map']['samtools']):
        if str(config['params']['map']['keep_bam']).lower() == 'true':
            F += Expand(J(map_dir, '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                          '{read_depth}', '{assembler}.bam'),
                        config['sim_params']) 
        # feature table
        if not skipped(config['params']['feature_table']['make']):   
            F.append(features_dir + 'feature_files.tsv')
            
    # State of the Art
    ## ALE
    if not skipped(config['params']['SotA']['ALE']):
        F += Expand(J(ale_dir, '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                      '{read_depth}', '{assembler}', 'ALE_results.txt.gz'),
                    config['sim_params']) 
    ## VALET
    if not skipped(config['params']['SotA']['VALET']):
        F += Expand(J(valet_dir, '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                      '{read_depth}', '{assembler}', 'summary.tsv'),
                   config['sim_params'])
    ## metaMIC
    if (not skipped(config['params']['SotA']['metaMIC']['extract']) and
        not skipped(config['params']['SotA']['metaMIC']['predict'])):
        F += Expand(J(metamic_dir, '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                      '{read_depth}', '{assembler}', 'metaMIC', 'metaMIC_contig_score.txt.gz'),
                    config['sim_params'])
        F += Expand(J(metamic_dir, '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                      '{read_depth}', '{assembler}', 'metaMIC',
                      'metaMIC_corrected_contigs.fa.gz'),
                    config['sim_params'])
        F += Expand(J(metamic_dir, '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                      '{read_depth}', '{assembler}', 'metaMIC', 'anomaly_score.txt.gz'),
                    config['sim_params'])
        F += Expand(J(metamic_dir, '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                      '{read_depth}', '{assembler}', 'metaMIC',
                      'misassembly_breakpoint.txt.gz'),
                    config['sim_params'])
        F += Expand(J(metamic_dir, '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                      '{read_depth}', '{assembler}', 'metaMIC', 'feature_matrix',
                      'window_fea_matrix.txt.gz'),
                    config['sim_params'])
        F += Expand(J(metamic_dir, '{richness}', '{abund_dist}', '{rep}', '{read_length}',
                      '{read_depth}', '{assembler}', 'metaMIC', 'temp', 'read_breakpoint',
                      'read_breakpoint_per_base.txt.gz'),
                    config['sim_params'])        
    # return
    return F


